<?xml version="1.0" encoding="UTF-8"?>

<Library xmlns="http://hl7.org/fhir">
  <id value="IMMZIndicatorCommon"/>
  <text>
    <status value="generated"/><div xmlns="http://www.w3.org/1999/xhtml"><h2>Contents</h2><p><code>text/cql</code></p><pre><code>/**
 * Immunization Common Stratifiers by Patients as Context
 */

library IMMZIndicatorCommon

using FHIR version '4.0.1'

include FHIRHelpers version '4.0.1'
include FHIRCommon called FC
include IMMZCommon called IMMZCom
include IMMZConcepts called IMMZc
include WHOCommon called WCom
include WHOConcepts called WC
codesystem &quot;ISO-8601-Derived Periods&quot;: 'http://ohie.org/CodeSystem/iso-8601-derived-periods'
parameter &quot;Measurement Period&quot; Interval&lt;Date&gt; default Interval[@2020-01-01, @2020-12-31]

// Age Groups for Vaccines for infants
code &quot;P0Y--P1Y&quot;: 'P0Y--P1Y' from &quot;ISO-8601-Derived Periods&quot; display '&lt; 1 year'
code &quot;P1Y--P9999Y&quot;: 'P1Y--P9999Y' from &quot;ISO-8601-Derived Periods&quot; display '&gt; 1 year'

// Age Groups for Vaccines for Toddlers
code &quot;P0Y--P2Y&quot;: 'P0Y--P2Y' from &quot;ISO-8601-Derived Periods&quot; display '&lt; 2 years'
code &quot;P2Y--P9999Y&quot;: 'P2Y--P9999Y' from &quot;ISO-8601-Derived Periods&quot; display '&gt; 2 years'

// Age groups for newborns
code &quot;PT0H--PT24H&quot;: 'PT0H--PT24H' from &quot;ISO-8601-Derived Periods&quot; display 'Within 24H of Birth'
code &quot;PT24H--P2W&quot;: 'PT24H--P2W' from &quot;ISO-8601-Derived Periods&quot; display '&lt; 2 Weeks'
code &quot;P2W--P9999Y&quot;: 'P2W--P9999Y' from &quot;ISO-8601-Derived Periods&quot; display '&gt; 2 Weeks'

// Age groups for adolescent
code &quot;P0Y--P9Y&quot;: 'P0Y--P9Y' from &quot;ISO-8601-Derived Periods&quot; display '&lt; 9 years'
code &quot;P9Y--P14Y&quot;: 'P9Y--P14Y' from &quot;ISO-8601-Derived Periods&quot; display '9 - 14 years'
code &quot;P15Y--P9999Y&quot;: 'P15Y--P9999Y' from &quot;ISO-8601-Derived Periods&quot; display '&gt; 15 years'

// RCV Startifiers
code &quot;P0M--P9M&quot;: 'P0M--P9M' from &quot;ISO-8601-Derived Periods&quot; display '&lt; 9 months'
code &quot;P9M--P18M&quot;: 'P9M--P18M' from &quot;ISO-8601-Derived Periods&quot; display '9 - 18 months'
code &quot;P18M--P15Y&quot;: 'P18M--P15Y' from &quot;ISO-8601-Derived Periods&quot; display '18 months - 15 years'

// Varicella Age groups
code &quot;P0M--P12M&quot;: 'P0M--P12M' from &quot;ISO-8601-Derived Periods&quot; display '&lt; 12 months'
code &quot;P12M--P18M&quot;: 'P12M--P18M' from &quot;ISO-8601-Derived Periods&quot; display '12 - 18 months'
code &quot;P18M--P36M&quot;: 'P18M--P36M' from &quot;ISO-8601-Derived Periods&quot; display '18 - 36 months'
code &quot;P36M--P12Y&quot;: 'P36M--P12Y' from &quot;ISO-8601-Derived Periods&quot; display '36 months - 12 years'
code &quot;P12Y--P9999Y&quot;: 'P12Y--P9999Y' from &quot;ISO-8601-Derived Periods&quot; display '&gt; 12 years'

// Influenza Age Groups
code &quot;P1Y--P15Y&quot;: 'P1Y--P15Y' from &quot;ISO-8601-Derived Periods&quot; display '1 year - 15 years'
code &quot;P15Y--P60Y&quot;: 'P15Y--P60Y' from &quot;ISO-8601-Derived Periods&quot; display '15 years - 60 years'
code &quot;P60Y--P9999Y&quot;: 'P60Y--P9999Y' from &quot;ISO-8601-Derived Periods&quot; display '&gt; 60 years'

codesystem &quot;Administrative Gender Codes&quot;: 'http://hl7.org/fhir/administrative-gender'
code &quot;Males&quot; : 'male' from &quot;Administrative Gender Codes&quot; display 'Males'
code &quot;Females&quot; : 'female' from &quot;Administrative Gender Codes&quot; display 'Females'
code &quot;Other&quot; : 'other' from &quot;Administrative Gender Codes&quot; display 'Other/NA'
context Patient


/** 
 * Infant disaggregations by age
 */
define &quot;Newborn By Age Stratifier&quot;:
    case 
        when AgeInHoursAt(start of &quot;Measurement Period&quot;) &lt;= 24 then &quot;PT0H--PT24H&quot;
        when AgeInWeeksAt(start of &quot;Measurement Period&quot;) &lt;= 2 then &quot;PT24H--P2W&quot;
        when AgeInWeeksAt(start of &quot;Measurement Period&quot;) &gt; 2 then &quot;P2W--P9999Y&quot;
        else null
    end

/** 
 * Infant disaggregations by age
 */
define &quot;Infant By Age Stratifier&quot;:
    case 
        when AgeInYearsAt(start of &quot;Measurement Period&quot;) &lt; 1 then &quot;P0Y--P1Y&quot;
        when AgeInYearsAt(start of &quot;Measurement Period&quot;) &gt;= 1 then &quot;P1Y--P9999Y&quot;
        else null
    end

/** 
 * Toddler By Age Stratifiers
 */
define &quot;Toddler By Age Stratifier&quot;:
    case 
        when AgeInYearsAt(start of &quot;Measurement Period&quot;) &lt; 2 then &quot;P0Y--P2Y&quot;
        when AgeInYearsAt(start of &quot;Measurement Period&quot;) &gt;= 2 then &quot;P2Y--P9999Y&quot;
        else null
    end


/** 
 * Toddler By Age Stratifiers
 */
define &quot;Adolescent By Age Stratifier&quot;:
    case 
        when AgeInYearsAt(start of &quot;Measurement Period&quot;) &lt; 9 then &quot;P0Y--P9Y&quot;
        when AgeInYearsAt(start of &quot;Measurement Period&quot;) &lt;= 14 then &quot;P9Y--P14Y&quot;
        when AgeInYearsAt(start of &quot;Measurement Period&quot;) &gt; 14 then &quot;P15Y--P9999Y&quot;
        else null
    end

/** 
 * RCV age disaggregators
 */
define &quot;RCV By Age Stratifier&quot;:
    case 
        when AgeInMonthsAt(start of &quot;Measurement Period&quot;) &lt; 9 then &quot;P0M--P9M&quot;
        when AgeInMonthsAt(start of &quot;Measurement Period&quot;) &lt; 18 then &quot;P9M--P18M&quot;
        when AgeInYearsAt(start of &quot;Measurement Period&quot;) &lt; 15 then &quot;P18M--P15Y&quot;
        when AgeInYearsAt(start of &quot;Measurement Period&quot;) &gt;= 15 then &quot;P15Y--P9999Y&quot;
        else null
    end

/** 
 * Varicella age disaggregators
 */
define &quot;Varicella By Age Stratifier&quot;:
    case 
        when AgeInMonthsAt(start of &quot;Measurement Period&quot;) &lt; 12 then &quot;P0M--P12M&quot;
        when AgeInMonthsAt(start of &quot;Measurement Period&quot;) &lt; 18 then &quot;P12M--P18M&quot;
        when AgeInMonthsAt(start of &quot;Measurement Period&quot;) &lt; 36 then &quot;P18M--P36M&quot;
        when AgeInYearsAt(start of &quot;Measurement Period&quot;) &lt; 12 then &quot;P36M--P12Y&quot;
        when AgeInYearsAt(start of &quot;Measurement Period&quot;) &gt;= 12 then &quot;P12Y--P9999Y&quot;
        else null
    end


/** 
 * Seasonal Influenza age disaggregators
 */
define &quot;Seasonal Influenza By Age Stratifier&quot;:
    case 
        when AgeInYearsAt(start of &quot;Measurement Period&quot;) &lt; 1 then &quot;P0Y--P1Y&quot;
        when AgeInYearsAt(start of &quot;Measurement Period&quot;) &lt; 15 then &quot;P1Y--P15Y&quot;
        when AgeInYearsAt(start of &quot;Measurement Period&quot;) &lt; 60 then &quot;P15Y--P60Y&quot;
        when AgeInYearsAt(start of &quot;Measurement Period&quot;) &gt;= 60 then &quot;P60Y--P9999Y&quot;
        else null
    end
/*
 * BCG Doses administered to the patient during the measurement period
 */
define &quot;BCG Doses Administered to Patient During Measurement Period&quot;:
    IMMZCom.&quot;BCG Doses Administered to Patient&quot; I
		where IMMZCom.ToDate(I.occurrence) during &quot;Measurement Period&quot;

/*
 * DTP Doses administered to the patient during the measurement period
 */
define &quot;DTP Doses Administered to Patient During Measurement Period&quot;:
    IMMZCom.&quot;DTP Doses Administered to Patient&quot; I
		where IMMZCom.ToDate(I.occurrence) during &quot;Measurement Period&quot;

/*
 * HepB Doses administered to the patient during the measurement period
 */
define &quot;HepB Birth Doses Administered to Patient During Measurement Period&quot;:
    IMMZCom.&quot;HepB Doses Administered to Patient&quot; I
		where IMMZCom.ToDate(I.occurrence) during &quot;Measurement Period&quot;
        and (singleton from I.protocolApplied).doseNumber = 0

/**
 * Non-Birth HepB doses administered to patient
 */
define &quot;HepB Non-Birth Doses Administered to Patient During Measurement Period&quot;:
    IMMZCom.&quot;HepB Doses Administered to Patient&quot; I
		where IMMZCom.ToDate(I.occurrence) during &quot;Measurement Period&quot;
        and (singleton from I.protocolApplied).doseNumber &gt; 0

/**
 * IPV Doses Administered to Patient
 */
define &quot;IPV Doses Administered to Patient During Measurement Period&quot;:
    IMMZCom.&quot;IPV Doses Administered to Patient&quot; I 
    where IMMZCom.ToDate(I.occurrence) during &quot;Measurement Period&quot;

define &quot;Seasonal Influenza Doses Administered to Patient During Reporting Period&quot;:
    IMMZCom.&quot;Seasonal Influenza Doses Administered to Patient&quot; I 
    where IMMZCom.ToDate(I.occurrence) during &quot;Measurement Period&quot;

/**
 * OPV Birth Doses Administered to Patient
 */
define &quot;bOPV Birth Doses Administered to Patient During Measurement Period&quot;:
    IMMZCom.&quot;bOPV Doses Administered to Patient&quot; I 
    where IMMZCom.ToDate(I.occurrence) during &quot;Measurement Period&quot;
    and (singleton from I.protocolApplied).doseNumber = 0

/**
 * OPV Non-Birth Doses Administered to Patient
 */
define &quot;bOPV Non-Birth Doses Administered to Patient During Measurement Period&quot;:
    IMMZCom.&quot;bOPV Doses Administered to Patient&quot; I 
    where IMMZCom.ToDate(I.occurrence) during &quot;Measurement Period&quot;
    and (singleton from I.protocolApplied).doseNumber &gt; 0


/**
 * MCV Doses Administered to Patient
 */
define &quot;MCV Doses Administered to Patient During Measurement Period&quot;:
    IMMZCom.&quot;MCV Doses Administered to Patient&quot; I 
    where IMMZCom.ToDate(I.occurrence) during &quot;Measurement Period&quot;

/**
 * HPV Doses Administered to Patient
 */
define &quot;HPV Doses Administered to Patient During Measurement Period&quot;:
    IMMZCom.&quot;HPV Doses Administered to Patient&quot; I 
    where IMMZCom.ToDate(I.occurrence) during &quot;Measurement Period&quot;

/**
 * Meningococcal Doses Administered to Patient
 */
define &quot;Meningococcal Doses Administered to Patient During Measurement Period&quot;:
    IMMZCom.&quot;Meningococcal Doses Administered to Patient&quot; I 
    where IMMZCom.ToDate(I.occurrence) during &quot;Measurement Period&quot;

/**
 * Pneumococcal Doses Administered to Patient
 */
define &quot;Pneumococcal Doses Administered to Patient During Measurement Period&quot;:
    IMMZCom.&quot;Pneumococcal Doses Administered to Patient&quot; I 
    where IMMZCom.ToDate(I.occurrence) during &quot;Measurement Period&quot;

/**
 * HIB Doses Administered to Patient
 */
define &quot;Hib Doses Administered to Patient During Measurement Period&quot;:
    IMMZCom.&quot;Hib Doses Administered to Patient&quot; I 
    where IMMZCom.ToDate(I.occurrence) during &quot;Measurement Period&quot;

/**
 * Rotavirus Doses Administered to Patient
 */
define &quot;Rotavirus Doses Administered to Patient During Measurement Period&quot;:
    IMMZCom.&quot;Rotavirus Doses Administered to Patient&quot; I 
    where IMMZCom.ToDate(I.occurrence) during &quot;Measurement Period&quot;

/**
 * RCV Doses Administered to Patient
 */
define &quot;Rubella Doses Administered to Patient During Measurement Period&quot;:
    IMMZCom.&quot;Rubella Doses Administered to Patient&quot; I 
    where IMMZCom.ToDate(I.occurrence) during &quot;Measurement Period&quot;

/**
 * Varicella Doses Administered to Patient
 */
define &quot;Varicella Doses Administered to Patient During Measurement Period&quot;:
    IMMZCom.&quot;Varicella Doses Administered to Patient&quot; I 
    where IMMZCom.ToDate(I.occurrence) during &quot;Measurement Period&quot;


/**
 * Diptheria Doses Administered to Patient
 */
define &quot;Diphtheria Booster Doses Administered to Patient During Measurement Period&quot;:
    IMMZCom.&quot;Diphtheria Doses Administered to Patient&quot; I 
    where IMMZCom.ToDate(I.occurrence) during &quot;Measurement Period&quot;
        and (singleton from I.protocolApplied).doseNumber &gt; 3

/**
 * Pertussis Doses Administered to Patient
 */
define &quot;Pertussis Booster Doses Administered to Patient During Measurement Period&quot;:
    IMMZCom.&quot;Diphtheria Doses Administered to Patient&quot; I 
    where IMMZCom.ToDate(I.occurrence) during &quot;Measurement Period&quot;
        and (singleton from I.protocolApplied).doseNumber &gt; 3


/**
 * Tetanus Doses Administered to Patient
 */
define &quot;Tetanus Booster Doses Administered to Patient During Measurement Period&quot;:
    IMMZCom.&quot;Tetanus Doses Administered to Patient&quot; I 
    where IMMZCom.ToDate(I.occurrence) during &quot;Measurement Period&quot;
        and (singleton from I.protocolApplied).doseNumber &gt; 4


/**
 * Yellow Fever Doses Administered to Patient
 */
define &quot;Yellow Fever Doses Administered to Patient During Measurement Period&quot;:
    IMMZCom.&quot;Yellow Fever Doses Administered to Patient&quot; I 
    where IMMZCom.ToDate(I.occurrence) during &quot;Measurement Period&quot;


/**
 * Japanese Encephalitis  Doses Administered to Patient
 */
define &quot;JE Doses Administered to Patient During Measurement Period&quot;:
    IMMZCom.&quot;JE Doses Administered to Patient&quot; I 
    where IMMZCom.ToDate(I.occurrence) during &quot;Measurement Period&quot;

/**
 * Typhoid Encephalitis  Doses Administered to Patient
 */
define &quot;Typhoid Doses Administered to Patient During Measurement Period&quot;:
    IMMZCom.&quot;Typhoid Doses Administered to Patient&quot; I 
    where IMMZCom.ToDate(I.occurrence) during &quot;Measurement Period&quot;

/** 
 * HPV Doses recommended during reporting period - 
 *  This is used since the country should define the rules which recommend an HPV dose (age, sex, etc.)
 */
define &quot;HPV Doses Recommended During Reporting Period&quot;:
    [ImmunizationRecommendation] IR
    where exists(IR.recommendation RC where exists(RC.dateCriterion DC where date from DC.value during &quot;Measurement Period&quot;)
    and RC.vaccineCode in IMMZc.&quot;HPV Vaccine&quot;)


/** 
 * Rubella Doses recommended during reporting period - 
 *  This is used since the country should define the rules which recommend an Rubella dose (configuration, age, sex, etc.)
 */
define &quot;Rubella Doses Recommended During Reporting Period&quot;:
    [ImmunizationRecommendation] IR
    where exists(IR.recommendation RC where exists(RC.dateCriterion DC where date from DC.value during &quot;Measurement Period&quot;)
    and RC.vaccineCode in IMMZc.&quot;Rubella Vaccine&quot;)

/** 
 * Varicella Doses recommended during reporting period - 
 *  This is used since the country should define the rules which recommend an Varicella dose (configuration, age, sex, etc.)
 */
define &quot;Varicella Doses Recommended During Reporting Period&quot;:
    [ImmunizationRecommendation] IR
    where exists(IR.recommendation RC where exists(RC.dateCriterion DC where date from DC.value during &quot;Measurement Period&quot;)
    and RC.vaccineCode in IMMZc.&quot;Varicella Vaccine&quot;)

/** 
 * Diphtheria Booster Doses recommended during reporting period - 
 *  This is used since the country should define the rules which recommend an Diphtheria booster dose (configuration, age, sex, etc.)
 */
define &quot;Diphtheria Booster Doses Recommended During Reporting Period&quot;:
    [ImmunizationRecommendation] IR
    where exists(IR.recommendation RC where exists(RC.dateCriterion DC where date from DC.value during &quot;Measurement Period&quot;)
    and RC.doseNumber &gt; 3
    and RC.vaccineCode in IMMZc.&quot;Diphtheria Vaccine&quot;)

/** 
 * Pertussis Booster Doses recommended during reporting period - 
 *  This is used since the country should define the rules which recommend an Pertussis booster dose (configuration, age, sex, etc.)
 */
define &quot;Pertussis Booster Doses Recommended During Reporting Period&quot;:
    [ImmunizationRecommendation] IR
    where exists(IR.recommendation RC where exists(RC.dateCriterion DC where date from DC.value during &quot;Measurement Period&quot;)
    and RC.doseNumber &gt; 3
    and RC.vaccineCode in IMMZc.&quot;Pertussis Vaccine&quot;)


/** 
 * Tetanus Booster Doses recommended during reporting period - 
 *  This is used since the country should define the rules which recommend an Tetanus booster dose (configuration, age, sex, etc.)
 */
define &quot;Tetanus Booster Doses Recommended During Reporting Period&quot;:
    [ImmunizationRecommendation] IR
    where exists(IR.recommendation RC where exists(RC.dateCriterion DC where date from DC.value during &quot;Measurement Period&quot;)
    and RC.doseNumber &gt; 3
    and RC.vaccineCode in IMMZc.&quot;Tetanus Vaccine&quot;)


/**
 * By Administrative Gender of Patient Stratifier
 */
define &quot;By Administrative Gender Stratifier&quot;:
    case 
        when Patient.gender = 'male' then &quot;Males&quot;
        when Patient.gender = 'female' then &quot;Females&quot;
        else &quot;Other&quot;
    end

/**
 * By Administrative Gender of Patient Stratifier
 */
define &quot;By Geographic Region Stratifier&quot;:
    First(Patient.address A where A.use in { 'home' }).state

/** 
 * @dataElement Patient is deceased
 */
define &quot;Patient Deceased During Measurement Period&quot;:
  case 
    when Patient.deceased is FHIR.boolean then Patient.deceased as FHIR.boolean
    when Patient.deceased is FHIR.dateTime then Patient.deceased as FHIR.dateTime before end of &quot;Measurement Period&quot;
    else false
  end

/** 
 * Patient was born during measurement period
 */
define &quot;Patient Born During Measurement Period&quot;:
    Patient.birthDate during &quot;Measurement Period&quot;

/** 
 * Patient is &lt; 12 months old at the end of the measurement period
 */
define &quot;Patient Under 12 Months Old During Measurement Period&quot;:
    Patient.birthDate more than 12 month before end of &quot;Measurement Period&quot;

/** 
 * Patient is &lt; 12 years old at the end of the measurement period
 */
define &quot;Patient Under 2 Years Old During Measurement Period&quot;:
    Patient.birthDate more than 2 year before end of &quot;Measurement Period&quot;


/** 
 * @define Adverse events for immunizations which occurred during (or observed) during measurement period
 */
define &quot;Immunizations with Adverse Events During Measurement Period&quot;:
    IMMZCom.&quot;Doses Administered to Patient&quot; I
    with [Observation: code in WC.&quot;Adverse Events&quot;] O
    such that exists(I.reaction R where O.id = Last(Split(R.detail.reference, '/')))
    and FC.ToInterval(O.effective) during &quot;Measurement Period&quot;


/** 
 * @define Adverse events for immunizations which occurred during (or observed) during measurement period
 */
define &quot;Adverse Event Reactions During Measurement Period&quot;:
    [Observation: code in WC.&quot;Adverse Events&quot;] O
    with IMMZCom.&quot;Doses Administered to Patient&quot; I
    such that exists(I.reaction R where O.id = Last(Split(R.detail.reference, '/')))
    where FC.ToInterval(O.effective) during &quot;Measurement Period&quot;

/** 
 * @define Doses which were 
 */
define &quot;Doses Administered to Patient During Measurement Period&quot;:
    IMMZCom.&quot;Doses Administered to Patient&quot;  I
    where IMMZCom.ToDate(I.occurrence) during &quot;Measurement Period&quot;

/** 
 * @function
 * @param immunization The immunization record for which the location should be retrieved
 * @return FHIR.address The location that the immunization event occurred
 */
define function GetGeographicRegionForImmunization(immunization Immunization):
    WCom.Official([Location] L 
        where L.id = Last(Split(immunization.location.reference, '/'))
        return L.address).state</code></pre></div>
  </text>
  <extension url="http://hl7.org/fhir/us/cqfmeasures/StructureDefinition/cqfm-softwaresystem">
    <valueReference>
      <reference value="Device/cqf-tooling"/>
    </valueReference>
  </extension>
  <url value="http://smart.who.int/ig/smart-immunizations-measles/Library/IMMZIndicatorCommon"/>
  <version value="0.1.0"/>
  <name value="IMMZIndicatorCommon"/>
  <status value="draft"/>
  <type>
    <coding>
      <system value="http://terminology.hl7.org/CodeSystem/library-type"/>
      <code value="logic-library"/>
    </coding>
  </type>
  <date value="2023-10-23T19:19:30+00:00"/>
  <publisher value="WHO"/>
  <contact>
    <name value="WHO"/>
    <telecom>
      <system value="url"/>
      <value value="http://who.int"/>
    </telecom>
  </contact>
  <content>
    <contentType value="text/cql"/>
    <data value="LyoqDQogKiBJbW11bml6YXRpb24gQ29tbW9uIFN0cmF0aWZpZXJzIGJ5IFBhdGllbnRzIGFzIENvbnRleHQNCiAqLw0KDQpsaWJyYXJ5IElNTVpJbmRpY2F0b3JDb21tb24NCg0KdXNpbmcgRkhJUiB2ZXJzaW9uICc0LjAuMScNCg0KaW5jbHVkZSBGSElSSGVscGVycyB2ZXJzaW9uICc0LjAuMScNCmluY2x1ZGUgRkhJUkNvbW1vbiBjYWxsZWQgRkMNCmluY2x1ZGUgSU1NWkNvbW1vbiBjYWxsZWQgSU1NWkNvbQ0KaW5jbHVkZSBJTU1aQ29uY2VwdHMgY2FsbGVkIElNTVpjDQppbmNsdWRlIFdIT0NvbW1vbiBjYWxsZWQgV0NvbQ0KaW5jbHVkZSBXSE9Db25jZXB0cyBjYWxsZWQgV0MNCmNvZGVzeXN0ZW0gIklTTy04NjAxLURlcml2ZWQgUGVyaW9kcyI6ICdodHRwOi8vb2hpZS5vcmcvQ29kZVN5c3RlbS9pc28tODYwMS1kZXJpdmVkLXBlcmlvZHMnDQpwYXJhbWV0ZXIgIk1lYXN1cmVtZW50IFBlcmlvZCIgSW50ZXJ2YWw8RGF0ZT4gZGVmYXVsdCBJbnRlcnZhbFtAMjAyMC0wMS0wMSwgQDIwMjAtMTItMzFdDQoNCi8vIEFnZSBHcm91cHMgZm9yIFZhY2NpbmVzIGZvciBpbmZhbnRzDQpjb2RlICJQMFktLVAxWSI6ICdQMFktLVAxWScgZnJvbSAiSVNPLTg2MDEtRGVyaXZlZCBQZXJpb2RzIiBkaXNwbGF5ICc8IDEgeWVhcicNCmNvZGUgIlAxWS0tUDk5OTlZIjogJ1AxWS0tUDk5OTlZJyBmcm9tICJJU08tODYwMS1EZXJpdmVkIFBlcmlvZHMiIGRpc3BsYXkgJz4gMSB5ZWFyJw0KDQovLyBBZ2UgR3JvdXBzIGZvciBWYWNjaW5lcyBmb3IgVG9kZGxlcnMNCmNvZGUgIlAwWS0tUDJZIjogJ1AwWS0tUDJZJyBmcm9tICJJU08tODYwMS1EZXJpdmVkIFBlcmlvZHMiIGRpc3BsYXkgJzwgMiB5ZWFycycNCmNvZGUgIlAyWS0tUDk5OTlZIjogJ1AyWS0tUDk5OTlZJyBmcm9tICJJU08tODYwMS1EZXJpdmVkIFBlcmlvZHMiIGRpc3BsYXkgJz4gMiB5ZWFycycNCg0KLy8gQWdlIGdyb3VwcyBmb3IgbmV3Ym9ybnMNCmNvZGUgIlBUMEgtLVBUMjRIIjogJ1BUMEgtLVBUMjRIJyBmcm9tICJJU08tODYwMS1EZXJpdmVkIFBlcmlvZHMiIGRpc3BsYXkgJ1dpdGhpbiAyNEggb2YgQmlydGgnDQpjb2RlICJQVDI0SC0tUDJXIjogJ1BUMjRILS1QMlcnIGZyb20gIklTTy04NjAxLURlcml2ZWQgUGVyaW9kcyIgZGlzcGxheSAnPCAyIFdlZWtzJw0KY29kZSAiUDJXLS1QOTk5OVkiOiAnUDJXLS1QOTk5OVknIGZyb20gIklTTy04NjAxLURlcml2ZWQgUGVyaW9kcyIgZGlzcGxheSAnPiAyIFdlZWtzJw0KDQovLyBBZ2UgZ3JvdXBzIGZvciBhZG9sZXNjZW50DQpjb2RlICJQMFktLVA5WSI6ICdQMFktLVA5WScgZnJvbSAiSVNPLTg2MDEtRGVyaXZlZCBQZXJpb2RzIiBkaXNwbGF5ICc8IDkgeWVhcnMnDQpjb2RlICJQOVktLVAxNFkiOiAnUDlZLS1QMTRZJyBmcm9tICJJU08tODYwMS1EZXJpdmVkIFBlcmlvZHMiIGRpc3BsYXkgJzkgLSAxNCB5ZWFycycNCmNvZGUgIlAxNVktLVA5OTk5WSI6ICdQMTVZLS1QOTk5OVknIGZyb20gIklTTy04NjAxLURlcml2ZWQgUGVyaW9kcyIgZGlzcGxheSAnPiAxNSB5ZWFycycNCg0KLy8gUkNWIFN0YXJ0aWZpZXJzDQpjb2RlICJQME0tLVA5TSI6ICdQME0tLVA5TScgZnJvbSAiSVNPLTg2MDEtRGVyaXZlZCBQZXJpb2RzIiBkaXNwbGF5ICc8IDkgbW9udGhzJw0KY29kZSAiUDlNLS1QMThNIjogJ1A5TS0tUDE4TScgZnJvbSAiSVNPLTg2MDEtRGVyaXZlZCBQZXJpb2RzIiBkaXNwbGF5ICc5IC0gMTggbW9udGhzJw0KY29kZSAiUDE4TS0tUDE1WSI6ICdQMThNLS1QMTVZJyBmcm9tICJJU08tODYwMS1EZXJpdmVkIFBlcmlvZHMiIGRpc3BsYXkgJzE4IG1vbnRocyAtIDE1IHllYXJzJw0KDQovLyBWYXJpY2VsbGEgQWdlIGdyb3Vwcw0KY29kZSAiUDBNLS1QMTJNIjogJ1AwTS0tUDEyTScgZnJvbSAiSVNPLTg2MDEtRGVyaXZlZCBQZXJpb2RzIiBkaXNwbGF5ICc8IDEyIG1vbnRocycNCmNvZGUgIlAxMk0tLVAxOE0iOiAnUDEyTS0tUDE4TScgZnJvbSAiSVNPLTg2MDEtRGVyaXZlZCBQZXJpb2RzIiBkaXNwbGF5ICcxMiAtIDE4IG1vbnRocycNCmNvZGUgIlAxOE0tLVAzNk0iOiAnUDE4TS0tUDM2TScgZnJvbSAiSVNPLTg2MDEtRGVyaXZlZCBQZXJpb2RzIiBkaXNwbGF5ICcxOCAtIDM2IG1vbnRocycNCmNvZGUgIlAzNk0tLVAxMlkiOiAnUDM2TS0tUDEyWScgZnJvbSAiSVNPLTg2MDEtRGVyaXZlZCBQZXJpb2RzIiBkaXNwbGF5ICczNiBtb250aHMgLSAxMiB5ZWFycycNCmNvZGUgIlAxMlktLVA5OTk5WSI6ICdQMTJZLS1QOTk5OVknIGZyb20gIklTTy04NjAxLURlcml2ZWQgUGVyaW9kcyIgZGlzcGxheSAnPiAxMiB5ZWFycycNCg0KLy8gSW5mbHVlbnphIEFnZSBHcm91cHMNCmNvZGUgIlAxWS0tUDE1WSI6ICdQMVktLVAxNVknIGZyb20gIklTTy04NjAxLURlcml2ZWQgUGVyaW9kcyIgZGlzcGxheSAnMSB5ZWFyIC0gMTUgeWVhcnMnDQpjb2RlICJQMTVZLS1QNjBZIjogJ1AxNVktLVA2MFknIGZyb20gIklTTy04NjAxLURlcml2ZWQgUGVyaW9kcyIgZGlzcGxheSAnMTUgeWVhcnMgLSA2MCB5ZWFycycNCmNvZGUgIlA2MFktLVA5OTk5WSI6ICdQNjBZLS1QOTk5OVknIGZyb20gIklTTy04NjAxLURlcml2ZWQgUGVyaW9kcyIgZGlzcGxheSAnPiA2MCB5ZWFycycNCg0KY29kZXN5c3RlbSAiQWRtaW5pc3RyYXRpdmUgR2VuZGVyIENvZGVzIjogJ2h0dHA6Ly9obDcub3JnL2ZoaXIvYWRtaW5pc3RyYXRpdmUtZ2VuZGVyJw0KY29kZSAiTWFsZXMiIDogJ21hbGUnIGZyb20gIkFkbWluaXN0cmF0aXZlIEdlbmRlciBDb2RlcyIgZGlzcGxheSAnTWFsZXMnDQpjb2RlICJGZW1hbGVzIiA6ICdmZW1hbGUnIGZyb20gIkFkbWluaXN0cmF0aXZlIEdlbmRlciBDb2RlcyIgZGlzcGxheSAnRmVtYWxlcycNCmNvZGUgIk90aGVyIiA6ICdvdGhlcicgZnJvbSAiQWRtaW5pc3RyYXRpdmUgR2VuZGVyIENvZGVzIiBkaXNwbGF5ICdPdGhlci9OQScNCmNvbnRleHQgUGF0aWVudA0KDQoNCi8qKiANCiAqIEluZmFudCBkaXNhZ2dyZWdhdGlvbnMgYnkgYWdlDQogKi8NCmRlZmluZSAiTmV3Ym9ybiBCeSBBZ2UgU3RyYXRpZmllciI6DQogICAgY2FzZSANCiAgICAgICAgd2hlbiBBZ2VJbkhvdXJzQXQoc3RhcnQgb2YgIk1lYXN1cmVtZW50IFBlcmlvZCIpIDw9IDI0IHRoZW4gIlBUMEgtLVBUMjRIIg0KICAgICAgICB3aGVuIEFnZUluV2Vla3NBdChzdGFydCBvZiAiTWVhc3VyZW1lbnQgUGVyaW9kIikgPD0gMiB0aGVuICJQVDI0SC0tUDJXIg0KICAgICAgICB3aGVuIEFnZUluV2Vla3NBdChzdGFydCBvZiAiTWVhc3VyZW1lbnQgUGVyaW9kIikgPiAyIHRoZW4gIlAyVy0tUDk5OTlZIg0KICAgICAgICBlbHNlIG51bGwNCiAgICBlbmQNCg0KLyoqIA0KICogSW5mYW50IGRpc2FnZ3JlZ2F0aW9ucyBieSBhZ2UNCiAqLw0KZGVmaW5lICJJbmZhbnQgQnkgQWdlIFN0cmF0aWZpZXIiOg0KICAgIGNhc2UgDQogICAgICAgIHdoZW4gQWdlSW5ZZWFyc0F0KHN0YXJ0IG9mICJNZWFzdXJlbWVudCBQZXJpb2QiKSA8IDEgdGhlbiAiUDBZLS1QMVkiDQogICAgICAgIHdoZW4gQWdlSW5ZZWFyc0F0KHN0YXJ0IG9mICJNZWFzdXJlbWVudCBQZXJpb2QiKSA+PSAxIHRoZW4gIlAxWS0tUDk5OTlZIg0KICAgICAgICBlbHNlIG51bGwNCiAgICBlbmQNCg0KLyoqIA0KICogVG9kZGxlciBCeSBBZ2UgU3RyYXRpZmllcnMNCiAqLw0KZGVmaW5lICJUb2RkbGVyIEJ5IEFnZSBTdHJhdGlmaWVyIjoNCiAgICBjYXNlIA0KICAgICAgICB3aGVuIEFnZUluWWVhcnNBdChzdGFydCBvZiAiTWVhc3VyZW1lbnQgUGVyaW9kIikgPCAyIHRoZW4gIlAwWS0tUDJZIg0KICAgICAgICB3aGVuIEFnZUluWWVhcnNBdChzdGFydCBvZiAiTWVhc3VyZW1lbnQgUGVyaW9kIikgPj0gMiB0aGVuICJQMlktLVA5OTk5WSINCiAgICAgICAgZWxzZSBudWxsDQogICAgZW5kDQoNCg0KLyoqIA0KICogVG9kZGxlciBCeSBBZ2UgU3RyYXRpZmllcnMNCiAqLw0KZGVmaW5lICJBZG9sZXNjZW50IEJ5IEFnZSBTdHJhdGlmaWVyIjoNCiAgICBjYXNlIA0KICAgICAgICB3aGVuIEFnZUluWWVhcnNBdChzdGFydCBvZiAiTWVhc3VyZW1lbnQgUGVyaW9kIikgPCA5IHRoZW4gIlAwWS0tUDlZIg0KICAgICAgICB3aGVuIEFnZUluWWVhcnNBdChzdGFydCBvZiAiTWVhc3VyZW1lbnQgUGVyaW9kIikgPD0gMTQgdGhlbiAiUDlZLS1QMTRZIg0KICAgICAgICB3aGVuIEFnZUluWWVhcnNBdChzdGFydCBvZiAiTWVhc3VyZW1lbnQgUGVyaW9kIikgPiAxNCB0aGVuICJQMTVZLS1QOTk5OVkiDQogICAgICAgIGVsc2UgbnVsbA0KICAgIGVuZA0KDQovKiogDQogKiBSQ1YgYWdlIGRpc2FnZ3JlZ2F0b3JzDQogKi8NCmRlZmluZSAiUkNWIEJ5IEFnZSBTdHJhdGlmaWVyIjoNCiAgICBjYXNlIA0KICAgICAgICB3aGVuIEFnZUluTW9udGhzQXQoc3RhcnQgb2YgIk1lYXN1cmVtZW50IFBlcmlvZCIpIDwgOSB0aGVuICJQME0tLVA5TSINCiAgICAgICAgd2hlbiBBZ2VJbk1vbnRoc0F0KHN0YXJ0IG9mICJNZWFzdXJlbWVudCBQZXJpb2QiKSA8IDE4IHRoZW4gIlA5TS0tUDE4TSINCiAgICAgICAgd2hlbiBBZ2VJblllYXJzQXQoc3RhcnQgb2YgIk1lYXN1cmVtZW50IFBlcmlvZCIpIDwgMTUgdGhlbiAiUDE4TS0tUDE1WSINCiAgICAgICAgd2hlbiBBZ2VJblllYXJzQXQoc3RhcnQgb2YgIk1lYXN1cmVtZW50IFBlcmlvZCIpID49IDE1IHRoZW4gIlAxNVktLVA5OTk5WSINCiAgICAgICAgZWxzZSBudWxsDQogICAgZW5kDQoNCi8qKiANCiAqIFZhcmljZWxsYSBhZ2UgZGlzYWdncmVnYXRvcnMNCiAqLw0KZGVmaW5lICJWYXJpY2VsbGEgQnkgQWdlIFN0cmF0aWZpZXIiOg0KICAgIGNhc2UgDQogICAgICAgIHdoZW4gQWdlSW5Nb250aHNBdChzdGFydCBvZiAiTWVhc3VyZW1lbnQgUGVyaW9kIikgPCAxMiB0aGVuICJQME0tLVAxMk0iDQogICAgICAgIHdoZW4gQWdlSW5Nb250aHNBdChzdGFydCBvZiAiTWVhc3VyZW1lbnQgUGVyaW9kIikgPCAxOCB0aGVuICJQMTJNLS1QMThNIg0KICAgICAgICB3aGVuIEFnZUluTW9udGhzQXQoc3RhcnQgb2YgIk1lYXN1cmVtZW50IFBlcmlvZCIpIDwgMzYgdGhlbiAiUDE4TS0tUDM2TSINCiAgICAgICAgd2hlbiBBZ2VJblllYXJzQXQoc3RhcnQgb2YgIk1lYXN1cmVtZW50IFBlcmlvZCIpIDwgMTIgdGhlbiAiUDM2TS0tUDEyWSINCiAgICAgICAgd2hlbiBBZ2VJblllYXJzQXQoc3RhcnQgb2YgIk1lYXN1cmVtZW50IFBlcmlvZCIpID49IDEyIHRoZW4gIlAxMlktLVA5OTk5WSINCiAgICAgICAgZWxzZSBudWxsDQogICAgZW5kDQoNCg0KLyoqIA0KICogU2Vhc29uYWwgSW5mbHVlbnphIGFnZSBkaXNhZ2dyZWdhdG9ycw0KICovDQpkZWZpbmUgIlNlYXNvbmFsIEluZmx1ZW56YSBCeSBBZ2UgU3RyYXRpZmllciI6DQogICAgY2FzZSANCiAgICAgICAgd2hlbiBBZ2VJblllYXJzQXQoc3RhcnQgb2YgIk1lYXN1cmVtZW50IFBlcmlvZCIpIDwgMSB0aGVuICJQMFktLVAxWSINCiAgICAgICAgd2hlbiBBZ2VJblllYXJzQXQoc3RhcnQgb2YgIk1lYXN1cmVtZW50IFBlcmlvZCIpIDwgMTUgdGhlbiAiUDFZLS1QMTVZIg0KICAgICAgICB3aGVuIEFnZUluWWVhcnNBdChzdGFydCBvZiAiTWVhc3VyZW1lbnQgUGVyaW9kIikgPCA2MCB0aGVuICJQMTVZLS1QNjBZIg0KICAgICAgICB3aGVuIEFnZUluWWVhcnNBdChzdGFydCBvZiAiTWVhc3VyZW1lbnQgUGVyaW9kIikgPj0gNjAgdGhlbiAiUDYwWS0tUDk5OTlZIg0KICAgICAgICBlbHNlIG51bGwNCiAgICBlbmQNCi8qDQogKiBCQ0cgRG9zZXMgYWRtaW5pc3RlcmVkIHRvIHRoZSBwYXRpZW50IGR1cmluZyB0aGUgbWVhc3VyZW1lbnQgcGVyaW9kDQogKi8NCmRlZmluZSAiQkNHIERvc2VzIEFkbWluaXN0ZXJlZCB0byBQYXRpZW50IER1cmluZyBNZWFzdXJlbWVudCBQZXJpb2QiOg0KICAgIElNTVpDb20uIkJDRyBEb3NlcyBBZG1pbmlzdGVyZWQgdG8gUGF0aWVudCIgSQ0KCQl3aGVyZSBJTU1aQ29tLlRvRGF0ZShJLm9jY3VycmVuY2UpIGR1cmluZyAiTWVhc3VyZW1lbnQgUGVyaW9kIg0KDQovKg0KICogRFRQIERvc2VzIGFkbWluaXN0ZXJlZCB0byB0aGUgcGF0aWVudCBkdXJpbmcgdGhlIG1lYXN1cmVtZW50IHBlcmlvZA0KICovDQpkZWZpbmUgIkRUUCBEb3NlcyBBZG1pbmlzdGVyZWQgdG8gUGF0aWVudCBEdXJpbmcgTWVhc3VyZW1lbnQgUGVyaW9kIjoNCiAgICBJTU1aQ29tLiJEVFAgRG9zZXMgQWRtaW5pc3RlcmVkIHRvIFBhdGllbnQiIEkNCgkJd2hlcmUgSU1NWkNvbS5Ub0RhdGUoSS5vY2N1cnJlbmNlKSBkdXJpbmcgIk1lYXN1cmVtZW50IFBlcmlvZCINCg0KLyoNCiAqIEhlcEIgRG9zZXMgYWRtaW5pc3RlcmVkIHRvIHRoZSBwYXRpZW50IGR1cmluZyB0aGUgbWVhc3VyZW1lbnQgcGVyaW9kDQogKi8NCmRlZmluZSAiSGVwQiBCaXJ0aCBEb3NlcyBBZG1pbmlzdGVyZWQgdG8gUGF0aWVudCBEdXJpbmcgTWVhc3VyZW1lbnQgUGVyaW9kIjoNCiAgICBJTU1aQ29tLiJIZXBCIERvc2VzIEFkbWluaXN0ZXJlZCB0byBQYXRpZW50IiBJDQoJCXdoZXJlIElNTVpDb20uVG9EYXRlKEkub2NjdXJyZW5jZSkgZHVyaW5nICJNZWFzdXJlbWVudCBQZXJpb2QiDQogICAgICAgIGFuZCAoc2luZ2xldG9uIGZyb20gSS5wcm90b2NvbEFwcGxpZWQpLmRvc2VOdW1iZXIgPSAwDQoNCi8qKg0KICogTm9uLUJpcnRoIEhlcEIgZG9zZXMgYWRtaW5pc3RlcmVkIHRvIHBhdGllbnQNCiAqLw0KZGVmaW5lICJIZXBCIE5vbi1CaXJ0aCBEb3NlcyBBZG1pbmlzdGVyZWQgdG8gUGF0aWVudCBEdXJpbmcgTWVhc3VyZW1lbnQgUGVyaW9kIjoNCiAgICBJTU1aQ29tLiJIZXBCIERvc2VzIEFkbWluaXN0ZXJlZCB0byBQYXRpZW50IiBJDQoJCXdoZXJlIElNTVpDb20uVG9EYXRlKEkub2NjdXJyZW5jZSkgZHVyaW5nICJNZWFzdXJlbWVudCBQZXJpb2QiDQogICAgICAgIGFuZCAoc2luZ2xldG9uIGZyb20gSS5wcm90b2NvbEFwcGxpZWQpLmRvc2VOdW1iZXIgPiAwDQoNCi8qKg0KICogSVBWIERvc2VzIEFkbWluaXN0ZXJlZCB0byBQYXRpZW50DQogKi8NCmRlZmluZSAiSVBWIERvc2VzIEFkbWluaXN0ZXJlZCB0byBQYXRpZW50IER1cmluZyBNZWFzdXJlbWVudCBQZXJpb2QiOg0KICAgIElNTVpDb20uIklQViBEb3NlcyBBZG1pbmlzdGVyZWQgdG8gUGF0aWVudCIgSSANCiAgICB3aGVyZSBJTU1aQ29tLlRvRGF0ZShJLm9jY3VycmVuY2UpIGR1cmluZyAiTWVhc3VyZW1lbnQgUGVyaW9kIg0KDQpkZWZpbmUgIlNlYXNvbmFsIEluZmx1ZW56YSBEb3NlcyBBZG1pbmlzdGVyZWQgdG8gUGF0aWVudCBEdXJpbmcgUmVwb3J0aW5nIFBlcmlvZCI6DQogICAgSU1NWkNvbS4iU2Vhc29uYWwgSW5mbHVlbnphIERvc2VzIEFkbWluaXN0ZXJlZCB0byBQYXRpZW50IiBJIA0KICAgIHdoZXJlIElNTVpDb20uVG9EYXRlKEkub2NjdXJyZW5jZSkgZHVyaW5nICJNZWFzdXJlbWVudCBQZXJpb2QiDQoNCi8qKg0KICogT1BWIEJpcnRoIERvc2VzIEFkbWluaXN0ZXJlZCB0byBQYXRpZW50DQogKi8NCmRlZmluZSAiYk9QViBCaXJ0aCBEb3NlcyBBZG1pbmlzdGVyZWQgdG8gUGF0aWVudCBEdXJpbmcgTWVhc3VyZW1lbnQgUGVyaW9kIjoNCiAgICBJTU1aQ29tLiJiT1BWIERvc2VzIEFkbWluaXN0ZXJlZCB0byBQYXRpZW50IiBJIA0KICAgIHdoZXJlIElNTVpDb20uVG9EYXRlKEkub2NjdXJyZW5jZSkgZHVyaW5nICJNZWFzdXJlbWVudCBQZXJpb2QiDQogICAgYW5kIChzaW5nbGV0b24gZnJvbSBJLnByb3RvY29sQXBwbGllZCkuZG9zZU51bWJlciA9IDANCg0KLyoqDQogKiBPUFYgTm9uLUJpcnRoIERvc2VzIEFkbWluaXN0ZXJlZCB0byBQYXRpZW50DQogKi8NCmRlZmluZSAiYk9QViBOb24tQmlydGggRG9zZXMgQWRtaW5pc3RlcmVkIHRvIFBhdGllbnQgRHVyaW5nIE1lYXN1cmVtZW50IFBlcmlvZCI6DQogICAgSU1NWkNvbS4iYk9QViBEb3NlcyBBZG1pbmlzdGVyZWQgdG8gUGF0aWVudCIgSSANCiAgICB3aGVyZSBJTU1aQ29tLlRvRGF0ZShJLm9jY3VycmVuY2UpIGR1cmluZyAiTWVhc3VyZW1lbnQgUGVyaW9kIg0KICAgIGFuZCAoc2luZ2xldG9uIGZyb20gSS5wcm90b2NvbEFwcGxpZWQpLmRvc2VOdW1iZXIgPiAwDQoNCg0KLyoqDQogKiBNQ1YgRG9zZXMgQWRtaW5pc3RlcmVkIHRvIFBhdGllbnQNCiAqLw0KZGVmaW5lICJNQ1YgRG9zZXMgQWRtaW5pc3RlcmVkIHRvIFBhdGllbnQgRHVyaW5nIE1lYXN1cmVtZW50IFBlcmlvZCI6DQogICAgSU1NWkNvbS4iTUNWIERvc2VzIEFkbWluaXN0ZXJlZCB0byBQYXRpZW50IiBJIA0KICAgIHdoZXJlIElNTVpDb20uVG9EYXRlKEkub2NjdXJyZW5jZSkgZHVyaW5nICJNZWFzdXJlbWVudCBQZXJpb2QiDQoNCi8qKg0KICogSFBWIERvc2VzIEFkbWluaXN0ZXJlZCB0byBQYXRpZW50DQogKi8NCmRlZmluZSAiSFBWIERvc2VzIEFkbWluaXN0ZXJlZCB0byBQYXRpZW50IER1cmluZyBNZWFzdXJlbWVudCBQZXJpb2QiOg0KICAgIElNTVpDb20uIkhQViBEb3NlcyBBZG1pbmlzdGVyZWQgdG8gUGF0aWVudCIgSSANCiAgICB3aGVyZSBJTU1aQ29tLlRvRGF0ZShJLm9jY3VycmVuY2UpIGR1cmluZyAiTWVhc3VyZW1lbnQgUGVyaW9kIg0KDQovKioNCiAqIE1lbmluZ29jb2NjYWwgRG9zZXMgQWRtaW5pc3RlcmVkIHRvIFBhdGllbnQNCiAqLw0KZGVmaW5lICJNZW5pbmdvY29jY2FsIERvc2VzIEFkbWluaXN0ZXJlZCB0byBQYXRpZW50IER1cmluZyBNZWFzdXJlbWVudCBQZXJpb2QiOg0KICAgIElNTVpDb20uIk1lbmluZ29jb2NjYWwgRG9zZXMgQWRtaW5pc3RlcmVkIHRvIFBhdGllbnQiIEkgDQogICAgd2hlcmUgSU1NWkNvbS5Ub0RhdGUoSS5vY2N1cnJlbmNlKSBkdXJpbmcgIk1lYXN1cmVtZW50IFBlcmlvZCINCg0KLyoqDQogKiBQbmV1bW9jb2NjYWwgRG9zZXMgQWRtaW5pc3RlcmVkIHRvIFBhdGllbnQNCiAqLw0KZGVmaW5lICJQbmV1bW9jb2NjYWwgRG9zZXMgQWRtaW5pc3RlcmVkIHRvIFBhdGllbnQgRHVyaW5nIE1lYXN1cmVtZW50IFBlcmlvZCI6DQogICAgSU1NWkNvbS4iUG5ldW1vY29jY2FsIERvc2VzIEFkbWluaXN0ZXJlZCB0byBQYXRpZW50IiBJIA0KICAgIHdoZXJlIElNTVpDb20uVG9EYXRlKEkub2NjdXJyZW5jZSkgZHVyaW5nICJNZWFzdXJlbWVudCBQZXJpb2QiDQoNCi8qKg0KICogSElCIERvc2VzIEFkbWluaXN0ZXJlZCB0byBQYXRpZW50DQogKi8NCmRlZmluZSAiSGliIERvc2VzIEFkbWluaXN0ZXJlZCB0byBQYXRpZW50IER1cmluZyBNZWFzdXJlbWVudCBQZXJpb2QiOg0KICAgIElNTVpDb20uIkhpYiBEb3NlcyBBZG1pbmlzdGVyZWQgdG8gUGF0aWVudCIgSSANCiAgICB3aGVyZSBJTU1aQ29tLlRvRGF0ZShJLm9jY3VycmVuY2UpIGR1cmluZyAiTWVhc3VyZW1lbnQgUGVyaW9kIg0KDQovKioNCiAqIFJvdGF2aXJ1cyBEb3NlcyBBZG1pbmlzdGVyZWQgdG8gUGF0aWVudA0KICovDQpkZWZpbmUgIlJvdGF2aXJ1cyBEb3NlcyBBZG1pbmlzdGVyZWQgdG8gUGF0aWVudCBEdXJpbmcgTWVhc3VyZW1lbnQgUGVyaW9kIjoNCiAgICBJTU1aQ29tLiJSb3RhdmlydXMgRG9zZXMgQWRtaW5pc3RlcmVkIHRvIFBhdGllbnQiIEkgDQogICAgd2hlcmUgSU1NWkNvbS5Ub0RhdGUoSS5vY2N1cnJlbmNlKSBkdXJpbmcgIk1lYXN1cmVtZW50IFBlcmlvZCINCg0KLyoqDQogKiBSQ1YgRG9zZXMgQWRtaW5pc3RlcmVkIHRvIFBhdGllbnQNCiAqLw0KZGVmaW5lICJSdWJlbGxhIERvc2VzIEFkbWluaXN0ZXJlZCB0byBQYXRpZW50IER1cmluZyBNZWFzdXJlbWVudCBQZXJpb2QiOg0KICAgIElNTVpDb20uIlJ1YmVsbGEgRG9zZXMgQWRtaW5pc3RlcmVkIHRvIFBhdGllbnQiIEkgDQogICAgd2hlcmUgSU1NWkNvbS5Ub0RhdGUoSS5vY2N1cnJlbmNlKSBkdXJpbmcgIk1lYXN1cmVtZW50IFBlcmlvZCINCg0KLyoqDQogKiBWYXJpY2VsbGEgRG9zZXMgQWRtaW5pc3RlcmVkIHRvIFBhdGllbnQNCiAqLw0KZGVmaW5lICJWYXJpY2VsbGEgRG9zZXMgQWRtaW5pc3RlcmVkIHRvIFBhdGllbnQgRHVyaW5nIE1lYXN1cmVtZW50IFBlcmlvZCI6DQogICAgSU1NWkNvbS4iVmFyaWNlbGxhIERvc2VzIEFkbWluaXN0ZXJlZCB0byBQYXRpZW50IiBJIA0KICAgIHdoZXJlIElNTVpDb20uVG9EYXRlKEkub2NjdXJyZW5jZSkgZHVyaW5nICJNZWFzdXJlbWVudCBQZXJpb2QiDQoNCg0KLyoqDQogKiBEaXB0aGVyaWEgRG9zZXMgQWRtaW5pc3RlcmVkIHRvIFBhdGllbnQNCiAqLw0KZGVmaW5lICJEaXBodGhlcmlhIEJvb3N0ZXIgRG9zZXMgQWRtaW5pc3RlcmVkIHRvIFBhdGllbnQgRHVyaW5nIE1lYXN1cmVtZW50IFBlcmlvZCI6DQogICAgSU1NWkNvbS4iRGlwaHRoZXJpYSBEb3NlcyBBZG1pbmlzdGVyZWQgdG8gUGF0aWVudCIgSSANCiAgICB3aGVyZSBJTU1aQ29tLlRvRGF0ZShJLm9jY3VycmVuY2UpIGR1cmluZyAiTWVhc3VyZW1lbnQgUGVyaW9kIg0KICAgICAgICBhbmQgKHNpbmdsZXRvbiBmcm9tIEkucHJvdG9jb2xBcHBsaWVkKS5kb3NlTnVtYmVyID4gMw0KDQovKioNCiAqIFBlcnR1c3NpcyBEb3NlcyBBZG1pbmlzdGVyZWQgdG8gUGF0aWVudA0KICovDQpkZWZpbmUgIlBlcnR1c3NpcyBCb29zdGVyIERvc2VzIEFkbWluaXN0ZXJlZCB0byBQYXRpZW50IER1cmluZyBNZWFzdXJlbWVudCBQZXJpb2QiOg0KICAgIElNTVpDb20uIkRpcGh0aGVyaWEgRG9zZXMgQWRtaW5pc3RlcmVkIHRvIFBhdGllbnQiIEkgDQogICAgd2hlcmUgSU1NWkNvbS5Ub0RhdGUoSS5vY2N1cnJlbmNlKSBkdXJpbmcgIk1lYXN1cmVtZW50IFBlcmlvZCINCiAgICAgICAgYW5kIChzaW5nbGV0b24gZnJvbSBJLnByb3RvY29sQXBwbGllZCkuZG9zZU51bWJlciA+IDMNCg0KDQovKioNCiAqIFRldGFudXMgRG9zZXMgQWRtaW5pc3RlcmVkIHRvIFBhdGllbnQNCiAqLw0KZGVmaW5lICJUZXRhbnVzIEJvb3N0ZXIgRG9zZXMgQWRtaW5pc3RlcmVkIHRvIFBhdGllbnQgRHVyaW5nIE1lYXN1cmVtZW50IFBlcmlvZCI6DQogICAgSU1NWkNvbS4iVGV0YW51cyBEb3NlcyBBZG1pbmlzdGVyZWQgdG8gUGF0aWVudCIgSSANCiAgICB3aGVyZSBJTU1aQ29tLlRvRGF0ZShJLm9jY3VycmVuY2UpIGR1cmluZyAiTWVhc3VyZW1lbnQgUGVyaW9kIg0KICAgICAgICBhbmQgKHNpbmdsZXRvbiBmcm9tIEkucHJvdG9jb2xBcHBsaWVkKS5kb3NlTnVtYmVyID4gNA0KDQoNCi8qKg0KICogWWVsbG93IEZldmVyIERvc2VzIEFkbWluaXN0ZXJlZCB0byBQYXRpZW50DQogKi8NCmRlZmluZSAiWWVsbG93IEZldmVyIERvc2VzIEFkbWluaXN0ZXJlZCB0byBQYXRpZW50IER1cmluZyBNZWFzdXJlbWVudCBQZXJpb2QiOg0KICAgIElNTVpDb20uIlllbGxvdyBGZXZlciBEb3NlcyBBZG1pbmlzdGVyZWQgdG8gUGF0aWVudCIgSSANCiAgICB3aGVyZSBJTU1aQ29tLlRvRGF0ZShJLm9jY3VycmVuY2UpIGR1cmluZyAiTWVhc3VyZW1lbnQgUGVyaW9kIg0KDQoNCi8qKg0KICogSmFwYW5lc2UgRW5jZXBoYWxpdGlzICBEb3NlcyBBZG1pbmlzdGVyZWQgdG8gUGF0aWVudA0KICovDQpkZWZpbmUgIkpFIERvc2VzIEFkbWluaXN0ZXJlZCB0byBQYXRpZW50IER1cmluZyBNZWFzdXJlbWVudCBQZXJpb2QiOg0KICAgIElNTVpDb20uIkpFIERvc2VzIEFkbWluaXN0ZXJlZCB0byBQYXRpZW50IiBJIA0KICAgIHdoZXJlIElNTVpDb20uVG9EYXRlKEkub2NjdXJyZW5jZSkgZHVyaW5nICJNZWFzdXJlbWVudCBQZXJpb2QiDQoNCi8qKg0KICogVHlwaG9pZCBFbmNlcGhhbGl0aXMgIERvc2VzIEFkbWluaXN0ZXJlZCB0byBQYXRpZW50DQogKi8NCmRlZmluZSAiVHlwaG9pZCBEb3NlcyBBZG1pbmlzdGVyZWQgdG8gUGF0aWVudCBEdXJpbmcgTWVhc3VyZW1lbnQgUGVyaW9kIjoNCiAgICBJTU1aQ29tLiJUeXBob2lkIERvc2VzIEFkbWluaXN0ZXJlZCB0byBQYXRpZW50IiBJIA0KICAgIHdoZXJlIElNTVpDb20uVG9EYXRlKEkub2NjdXJyZW5jZSkgZHVyaW5nICJNZWFzdXJlbWVudCBQZXJpb2QiDQoNCi8qKiANCiAqIEhQViBEb3NlcyByZWNvbW1lbmRlZCBkdXJpbmcgcmVwb3J0aW5nIHBlcmlvZCAtIA0KICogIFRoaXMgaXMgdXNlZCBzaW5jZSB0aGUgY291bnRyeSBzaG91bGQgZGVmaW5lIHRoZSBydWxlcyB3aGljaCByZWNvbW1lbmQgYW4gSFBWIGRvc2UgKGFnZSwgc2V4LCBldGMuKQ0KICovDQpkZWZpbmUgIkhQViBEb3NlcyBSZWNvbW1lbmRlZCBEdXJpbmcgUmVwb3J0aW5nIFBlcmlvZCI6DQogICAgW0ltbXVuaXphdGlvblJlY29tbWVuZGF0aW9uXSBJUg0KICAgIHdoZXJlIGV4aXN0cyhJUi5yZWNvbW1lbmRhdGlvbiBSQyB3aGVyZSBleGlzdHMoUkMuZGF0ZUNyaXRlcmlvbiBEQyB3aGVyZSBkYXRlIGZyb20gREMudmFsdWUgZHVyaW5nICJNZWFzdXJlbWVudCBQZXJpb2QiKQ0KICAgIGFuZCBSQy52YWNjaW5lQ29kZSBpbiBJTU1aYy4iSFBWIFZhY2NpbmUiKQ0KDQoNCi8qKiANCiAqIFJ1YmVsbGEgRG9zZXMgcmVjb21tZW5kZWQgZHVyaW5nIHJlcG9ydGluZyBwZXJpb2QgLSANCiAqICBUaGlzIGlzIHVzZWQgc2luY2UgdGhlIGNvdW50cnkgc2hvdWxkIGRlZmluZSB0aGUgcnVsZXMgd2hpY2ggcmVjb21tZW5kIGFuIFJ1YmVsbGEgZG9zZSAoY29uZmlndXJhdGlvbiwgYWdlLCBzZXgsIGV0Yy4pDQogKi8NCmRlZmluZSAiUnViZWxsYSBEb3NlcyBSZWNvbW1lbmRlZCBEdXJpbmcgUmVwb3J0aW5nIFBlcmlvZCI6DQogICAgW0ltbXVuaXphdGlvblJlY29tbWVuZGF0aW9uXSBJUg0KICAgIHdoZXJlIGV4aXN0cyhJUi5yZWNvbW1lbmRhdGlvbiBSQyB3aGVyZSBleGlzdHMoUkMuZGF0ZUNyaXRlcmlvbiBEQyB3aGVyZSBkYXRlIGZyb20gREMudmFsdWUgZHVyaW5nICJNZWFzdXJlbWVudCBQZXJpb2QiKQ0KICAgIGFuZCBSQy52YWNjaW5lQ29kZSBpbiBJTU1aYy4iUnViZWxsYSBWYWNjaW5lIikNCg0KLyoqIA0KICogVmFyaWNlbGxhIERvc2VzIHJlY29tbWVuZGVkIGR1cmluZyByZXBvcnRpbmcgcGVyaW9kIC0gDQogKiAgVGhpcyBpcyB1c2VkIHNpbmNlIHRoZSBjb3VudHJ5IHNob3VsZCBkZWZpbmUgdGhlIHJ1bGVzIHdoaWNoIHJlY29tbWVuZCBhbiBWYXJpY2VsbGEgZG9zZSAoY29uZmlndXJhdGlvbiwgYWdlLCBzZXgsIGV0Yy4pDQogKi8NCmRlZmluZSAiVmFyaWNlbGxhIERvc2VzIFJlY29tbWVuZGVkIER1cmluZyBSZXBvcnRpbmcgUGVyaW9kIjoNCiAgICBbSW1tdW5pemF0aW9uUmVjb21tZW5kYXRpb25dIElSDQogICAgd2hlcmUgZXhpc3RzKElSLnJlY29tbWVuZGF0aW9uIFJDIHdoZXJlIGV4aXN0cyhSQy5kYXRlQ3JpdGVyaW9uIERDIHdoZXJlIGRhdGUgZnJvbSBEQy52YWx1ZSBkdXJpbmcgIk1lYXN1cmVtZW50IFBlcmlvZCIpDQogICAgYW5kIFJDLnZhY2NpbmVDb2RlIGluIElNTVpjLiJWYXJpY2VsbGEgVmFjY2luZSIpDQoNCi8qKiANCiAqIERpcGh0aGVyaWEgQm9vc3RlciBEb3NlcyByZWNvbW1lbmRlZCBkdXJpbmcgcmVwb3J0aW5nIHBlcmlvZCAtIA0KICogIFRoaXMgaXMgdXNlZCBzaW5jZSB0aGUgY291bnRyeSBzaG91bGQgZGVmaW5lIHRoZSBydWxlcyB3aGljaCByZWNvbW1lbmQgYW4gRGlwaHRoZXJpYSBib29zdGVyIGRvc2UgKGNvbmZpZ3VyYXRpb24sIGFnZSwgc2V4LCBldGMuKQ0KICovDQpkZWZpbmUgIkRpcGh0aGVyaWEgQm9vc3RlciBEb3NlcyBSZWNvbW1lbmRlZCBEdXJpbmcgUmVwb3J0aW5nIFBlcmlvZCI6DQogICAgW0ltbXVuaXphdGlvblJlY29tbWVuZGF0aW9uXSBJUg0KICAgIHdoZXJlIGV4aXN0cyhJUi5yZWNvbW1lbmRhdGlvbiBSQyB3aGVyZSBleGlzdHMoUkMuZGF0ZUNyaXRlcmlvbiBEQyB3aGVyZSBkYXRlIGZyb20gREMudmFsdWUgZHVyaW5nICJNZWFzdXJlbWVudCBQZXJpb2QiKQ0KICAgIGFuZCBSQy5kb3NlTnVtYmVyID4gMw0KICAgIGFuZCBSQy52YWNjaW5lQ29kZSBpbiBJTU1aYy4iRGlwaHRoZXJpYSBWYWNjaW5lIikNCg0KLyoqIA0KICogUGVydHVzc2lzIEJvb3N0ZXIgRG9zZXMgcmVjb21tZW5kZWQgZHVyaW5nIHJlcG9ydGluZyBwZXJpb2QgLSANCiAqICBUaGlzIGlzIHVzZWQgc2luY2UgdGhlIGNvdW50cnkgc2hvdWxkIGRlZmluZSB0aGUgcnVsZXMgd2hpY2ggcmVjb21tZW5kIGFuIFBlcnR1c3NpcyBib29zdGVyIGRvc2UgKGNvbmZpZ3VyYXRpb24sIGFnZSwgc2V4LCBldGMuKQ0KICovDQpkZWZpbmUgIlBlcnR1c3NpcyBCb29zdGVyIERvc2VzIFJlY29tbWVuZGVkIER1cmluZyBSZXBvcnRpbmcgUGVyaW9kIjoNCiAgICBbSW1tdW5pemF0aW9uUmVjb21tZW5kYXRpb25dIElSDQogICAgd2hlcmUgZXhpc3RzKElSLnJlY29tbWVuZGF0aW9uIFJDIHdoZXJlIGV4aXN0cyhSQy5kYXRlQ3JpdGVyaW9uIERDIHdoZXJlIGRhdGUgZnJvbSBEQy52YWx1ZSBkdXJpbmcgIk1lYXN1cmVtZW50IFBlcmlvZCIpDQogICAgYW5kIFJDLmRvc2VOdW1iZXIgPiAzDQogICAgYW5kIFJDLnZhY2NpbmVDb2RlIGluIElNTVpjLiJQZXJ0dXNzaXMgVmFjY2luZSIpDQoNCg0KLyoqIA0KICogVGV0YW51cyBCb29zdGVyIERvc2VzIHJlY29tbWVuZGVkIGR1cmluZyByZXBvcnRpbmcgcGVyaW9kIC0gDQogKiAgVGhpcyBpcyB1c2VkIHNpbmNlIHRoZSBjb3VudHJ5IHNob3VsZCBkZWZpbmUgdGhlIHJ1bGVzIHdoaWNoIHJlY29tbWVuZCBhbiBUZXRhbnVzIGJvb3N0ZXIgZG9zZSAoY29uZmlndXJhdGlvbiwgYWdlLCBzZXgsIGV0Yy4pDQogKi8NCmRlZmluZSAiVGV0YW51cyBCb29zdGVyIERvc2VzIFJlY29tbWVuZGVkIER1cmluZyBSZXBvcnRpbmcgUGVyaW9kIjoNCiAgICBbSW1tdW5pemF0aW9uUmVjb21tZW5kYXRpb25dIElSDQogICAgd2hlcmUgZXhpc3RzKElSLnJlY29tbWVuZGF0aW9uIFJDIHdoZXJlIGV4aXN0cyhSQy5kYXRlQ3JpdGVyaW9uIERDIHdoZXJlIGRhdGUgZnJvbSBEQy52YWx1ZSBkdXJpbmcgIk1lYXN1cmVtZW50IFBlcmlvZCIpDQogICAgYW5kIFJDLmRvc2VOdW1iZXIgPiAzDQogICAgYW5kIFJDLnZhY2NpbmVDb2RlIGluIElNTVpjLiJUZXRhbnVzIFZhY2NpbmUiKQ0KDQoNCi8qKg0KICogQnkgQWRtaW5pc3RyYXRpdmUgR2VuZGVyIG9mIFBhdGllbnQgU3RyYXRpZmllcg0KICovDQpkZWZpbmUgIkJ5IEFkbWluaXN0cmF0aXZlIEdlbmRlciBTdHJhdGlmaWVyIjoNCiAgICBjYXNlIA0KICAgICAgICB3aGVuIFBhdGllbnQuZ2VuZGVyID0gJ21hbGUnIHRoZW4gIk1hbGVzIg0KICAgICAgICB3aGVuIFBhdGllbnQuZ2VuZGVyID0gJ2ZlbWFsZScgdGhlbiAiRmVtYWxlcyINCiAgICAgICAgZWxzZSAiT3RoZXIiDQogICAgZW5kDQoNCi8qKg0KICogQnkgQWRtaW5pc3RyYXRpdmUgR2VuZGVyIG9mIFBhdGllbnQgU3RyYXRpZmllcg0KICovDQpkZWZpbmUgIkJ5IEdlb2dyYXBoaWMgUmVnaW9uIFN0cmF0aWZpZXIiOg0KICAgIEZpcnN0KFBhdGllbnQuYWRkcmVzcyBBIHdoZXJlIEEudXNlIGluIHsgJ2hvbWUnIH0pLnN0YXRlDQoNCi8qKiANCiAqIEBkYXRhRWxlbWVudCBQYXRpZW50IGlzIGRlY2Vhc2VkDQogKi8NCmRlZmluZSAiUGF0aWVudCBEZWNlYXNlZCBEdXJpbmcgTWVhc3VyZW1lbnQgUGVyaW9kIjoNCiAgY2FzZSANCiAgICB3aGVuIFBhdGllbnQuZGVjZWFzZWQgaXMgRkhJUi5ib29sZWFuIHRoZW4gUGF0aWVudC5kZWNlYXNlZCBhcyBGSElSLmJvb2xlYW4NCiAgICB3aGVuIFBhdGllbnQuZGVjZWFzZWQgaXMgRkhJUi5kYXRlVGltZSB0aGVuIFBhdGllbnQuZGVjZWFzZWQgYXMgRkhJUi5kYXRlVGltZSBiZWZvcmUgZW5kIG9mICJNZWFzdXJlbWVudCBQZXJpb2QiDQogICAgZWxzZSBmYWxzZQ0KICBlbmQNCg0KLyoqIA0KICogUGF0aWVudCB3YXMgYm9ybiBkdXJpbmcgbWVhc3VyZW1lbnQgcGVyaW9kDQogKi8NCmRlZmluZSAiUGF0aWVudCBCb3JuIER1cmluZyBNZWFzdXJlbWVudCBQZXJpb2QiOg0KICAgIFBhdGllbnQuYmlydGhEYXRlIGR1cmluZyAiTWVhc3VyZW1lbnQgUGVyaW9kIg0KDQovKiogDQogKiBQYXRpZW50IGlzIDwgMTIgbW9udGhzIG9sZCBhdCB0aGUgZW5kIG9mIHRoZSBtZWFzdXJlbWVudCBwZXJpb2QNCiAqLw0KZGVmaW5lICJQYXRpZW50IFVuZGVyIDEyIE1vbnRocyBPbGQgRHVyaW5nIE1lYXN1cmVtZW50IFBlcmlvZCI6DQogICAgUGF0aWVudC5iaXJ0aERhdGUgbW9yZSB0aGFuIDEyIG1vbnRoIGJlZm9yZSBlbmQgb2YgIk1lYXN1cmVtZW50IFBlcmlvZCINCg0KLyoqIA0KICogUGF0aWVudCBpcyA8IDEyIHllYXJzIG9sZCBhdCB0aGUgZW5kIG9mIHRoZSBtZWFzdXJlbWVudCBwZXJpb2QNCiAqLw0KZGVmaW5lICJQYXRpZW50IFVuZGVyIDIgWWVhcnMgT2xkIER1cmluZyBNZWFzdXJlbWVudCBQZXJpb2QiOg0KICAgIFBhdGllbnQuYmlydGhEYXRlIG1vcmUgdGhhbiAyIHllYXIgYmVmb3JlIGVuZCBvZiAiTWVhc3VyZW1lbnQgUGVyaW9kIg0KDQoNCi8qKiANCiAqIEBkZWZpbmUgQWR2ZXJzZSBldmVudHMgZm9yIGltbXVuaXphdGlvbnMgd2hpY2ggb2NjdXJyZWQgZHVyaW5nIChvciBvYnNlcnZlZCkgZHVyaW5nIG1lYXN1cmVtZW50IHBlcmlvZA0KICovDQpkZWZpbmUgIkltbXVuaXphdGlvbnMgd2l0aCBBZHZlcnNlIEV2ZW50cyBEdXJpbmcgTWVhc3VyZW1lbnQgUGVyaW9kIjoNCiAgICBJTU1aQ29tLiJEb3NlcyBBZG1pbmlzdGVyZWQgdG8gUGF0aWVudCIgSQ0KICAgIHdpdGggW09ic2VydmF0aW9uOiBjb2RlIGluIFdDLiJBZHZlcnNlIEV2ZW50cyJdIE8NCiAgICBzdWNoIHRoYXQgZXhpc3RzKEkucmVhY3Rpb24gUiB3aGVyZSBPLmlkID0gTGFzdChTcGxpdChSLmRldGFpbC5yZWZlcmVuY2UsICcvJykpKQ0KICAgIGFuZCBGQy5Ub0ludGVydmFsKE8uZWZmZWN0aXZlKSBkdXJpbmcgIk1lYXN1cmVtZW50IFBlcmlvZCINCg0KDQovKiogDQogKiBAZGVmaW5lIEFkdmVyc2UgZXZlbnRzIGZvciBpbW11bml6YXRpb25zIHdoaWNoIG9jY3VycmVkIGR1cmluZyAob3Igb2JzZXJ2ZWQpIGR1cmluZyBtZWFzdXJlbWVudCBwZXJpb2QNCiAqLw0KZGVmaW5lICJBZHZlcnNlIEV2ZW50IFJlYWN0aW9ucyBEdXJpbmcgTWVhc3VyZW1lbnQgUGVyaW9kIjoNCiAgICBbT2JzZXJ2YXRpb246IGNvZGUgaW4gV0MuIkFkdmVyc2UgRXZlbnRzIl0gTw0KICAgIHdpdGggSU1NWkNvbS4iRG9zZXMgQWRtaW5pc3RlcmVkIHRvIFBhdGllbnQiIEkNCiAgICBzdWNoIHRoYXQgZXhpc3RzKEkucmVhY3Rpb24gUiB3aGVyZSBPLmlkID0gTGFzdChTcGxpdChSLmRldGFpbC5yZWZlcmVuY2UsICcvJykpKQ0KICAgIHdoZXJlIEZDLlRvSW50ZXJ2YWwoTy5lZmZlY3RpdmUpIGR1cmluZyAiTWVhc3VyZW1lbnQgUGVyaW9kIg0KDQovKiogDQogKiBAZGVmaW5lIERvc2VzIHdoaWNoIHdlcmUgDQogKi8NCmRlZmluZSAiRG9zZXMgQWRtaW5pc3RlcmVkIHRvIFBhdGllbnQgRHVyaW5nIE1lYXN1cmVtZW50IFBlcmlvZCI6DQogICAgSU1NWkNvbS4iRG9zZXMgQWRtaW5pc3RlcmVkIHRvIFBhdGllbnQiICBJDQogICAgd2hlcmUgSU1NWkNvbS5Ub0RhdGUoSS5vY2N1cnJlbmNlKSBkdXJpbmcgIk1lYXN1cmVtZW50IFBlcmlvZCINCg0KLyoqIA0KICogQGZ1bmN0aW9uDQogKiBAcGFyYW0gaW1tdW5pemF0aW9uIFRoZSBpbW11bml6YXRpb24gcmVjb3JkIGZvciB3aGljaCB0aGUgbG9jYXRpb24gc2hvdWxkIGJlIHJldHJpZXZlZA0KICogQHJldHVybiBGSElSLmFkZHJlc3MgVGhlIGxvY2F0aW9uIHRoYXQgdGhlIGltbXVuaXphdGlvbiBldmVudCBvY2N1cnJlZA0KICovDQpkZWZpbmUgZnVuY3Rpb24gR2V0R2VvZ3JhcGhpY1JlZ2lvbkZvckltbXVuaXphdGlvbihpbW11bml6YXRpb24gSW1tdW5pemF0aW9uKToNCiAgICBXQ29tLk9mZmljaWFsKFtMb2NhdGlvbl0gTCANCiAgICAgICAgd2hlcmUgTC5pZCA9IExhc3QoU3BsaXQoaW1tdW5pemF0aW9uLmxvY2F0aW9uLnJlZmVyZW5jZSwgJy8nKSkNCiAgICAgICAgcmV0dXJuIEwuYWRkcmVzcykuc3RhdGU="/>
  </content>
</Library>