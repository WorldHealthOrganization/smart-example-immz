{
  "resourceType" : "Library",
  "id" : "IMMZIndicatorCommon",
  "text" : {
    "status" : "generated",
    "div" : "<div xmlns=\"http://www.w3.org/1999/xhtml\"><h2>Contents</h2><p><code>text/cql</code></p><pre><code>/**\r\n * Immunization Common Stratifiers by Patients as Context\r\n */\r\n\r\nlibrary IMMZIndicatorCommon\r\n\r\nusing FHIR version '4.0.1'\r\n\r\ninclude FHIRHelpers version '4.0.1'\r\ninclude FHIRCommon called FC\r\ninclude IMMZCommon called IMMZCom\r\ninclude IMMZConcepts called IMMZc\r\ninclude WHOCommon called WCom\r\ninclude WHOConcepts called WC\r\ncodesystem &quot;ISO-8601-Derived Periods&quot;: 'http://ohie.org/CodeSystem/iso-8601-derived-periods'\r\nparameter &quot;Measurement Period&quot; Interval&lt;Date&gt; default Interval[@2020-01-01, @2020-12-31]\r\n\r\n// Age Groups for Vaccines for infants\r\ncode &quot;P0Y--P1Y&quot;: 'P0Y--P1Y' from &quot;ISO-8601-Derived Periods&quot; display '&lt; 1 year'\r\ncode &quot;P1Y--P9999Y&quot;: 'P1Y--P9999Y' from &quot;ISO-8601-Derived Periods&quot; display '&gt; 1 year'\r\n\r\n// Age Groups for Vaccines for Toddlers\r\ncode &quot;P0Y--P2Y&quot;: 'P0Y--P2Y' from &quot;ISO-8601-Derived Periods&quot; display '&lt; 2 years'\r\ncode &quot;P2Y--P9999Y&quot;: 'P2Y--P9999Y' from &quot;ISO-8601-Derived Periods&quot; display '&gt; 2 years'\r\n\r\n// Age groups for newborns\r\ncode &quot;PT0H--PT24H&quot;: 'PT0H--PT24H' from &quot;ISO-8601-Derived Periods&quot; display 'Within 24H of Birth'\r\ncode &quot;PT24H--P2W&quot;: 'PT24H--P2W' from &quot;ISO-8601-Derived Periods&quot; display '&lt; 2 Weeks'\r\ncode &quot;P2W--P9999Y&quot;: 'P2W--P9999Y' from &quot;ISO-8601-Derived Periods&quot; display '&gt; 2 Weeks'\r\n\r\n// Age groups for adolescent\r\ncode &quot;P0Y--P9Y&quot;: 'P0Y--P9Y' from &quot;ISO-8601-Derived Periods&quot; display '&lt; 9 years'\r\ncode &quot;P9Y--P14Y&quot;: 'P9Y--P14Y' from &quot;ISO-8601-Derived Periods&quot; display '9 - 14 years'\r\ncode &quot;P15Y--P9999Y&quot;: 'P15Y--P9999Y' from &quot;ISO-8601-Derived Periods&quot; display '&gt; 15 years'\r\n\r\n// RCV Startifiers\r\ncode &quot;P0M--P9M&quot;: 'P0M--P9M' from &quot;ISO-8601-Derived Periods&quot; display '&lt; 9 months'\r\ncode &quot;P9M--P18M&quot;: 'P9M--P18M' from &quot;ISO-8601-Derived Periods&quot; display '9 - 18 months'\r\ncode &quot;P18M--P15Y&quot;: 'P18M--P15Y' from &quot;ISO-8601-Derived Periods&quot; display '18 months - 15 years'\r\n\r\n// Varicella Age groups\r\ncode &quot;P0M--P12M&quot;: 'P0M--P12M' from &quot;ISO-8601-Derived Periods&quot; display '&lt; 12 months'\r\ncode &quot;P12M--P18M&quot;: 'P12M--P18M' from &quot;ISO-8601-Derived Periods&quot; display '12 - 18 months'\r\ncode &quot;P18M--P36M&quot;: 'P18M--P36M' from &quot;ISO-8601-Derived Periods&quot; display '18 - 36 months'\r\ncode &quot;P36M--P12Y&quot;: 'P36M--P12Y' from &quot;ISO-8601-Derived Periods&quot; display '36 months - 12 years'\r\ncode &quot;P12Y--P9999Y&quot;: 'P12Y--P9999Y' from &quot;ISO-8601-Derived Periods&quot; display '&gt; 12 years'\r\n\r\n// Influenza Age Groups\r\ncode &quot;P1Y--P15Y&quot;: 'P1Y--P15Y' from &quot;ISO-8601-Derived Periods&quot; display '1 year - 15 years'\r\ncode &quot;P15Y--P60Y&quot;: 'P15Y--P60Y' from &quot;ISO-8601-Derived Periods&quot; display '15 years - 60 years'\r\ncode &quot;P60Y--P9999Y&quot;: 'P60Y--P9999Y' from &quot;ISO-8601-Derived Periods&quot; display '&gt; 60 years'\r\n\r\ncodesystem &quot;Administrative Gender Codes&quot;: 'http://hl7.org/fhir/administrative-gender'\r\ncode &quot;Males&quot; : 'male' from &quot;Administrative Gender Codes&quot; display 'Males'\r\ncode &quot;Females&quot; : 'female' from &quot;Administrative Gender Codes&quot; display 'Females'\r\ncode &quot;Other&quot; : 'other' from &quot;Administrative Gender Codes&quot; display 'Other/NA'\r\ncontext Patient\r\n\r\n\r\n/** \r\n * Infant disaggregations by age\r\n */\r\ndefine &quot;Newborn By Age Stratifier&quot;:\r\n    case \r\n        when AgeInHoursAt(start of &quot;Measurement Period&quot;) &lt;= 24 then &quot;PT0H--PT24H&quot;\r\n        when AgeInWeeksAt(start of &quot;Measurement Period&quot;) &lt;= 2 then &quot;PT24H--P2W&quot;\r\n        when AgeInWeeksAt(start of &quot;Measurement Period&quot;) &gt; 2 then &quot;P2W--P9999Y&quot;\r\n        else null\r\n    end\r\n\r\n/** \r\n * Infant disaggregations by age\r\n */\r\ndefine &quot;Infant By Age Stratifier&quot;:\r\n    case \r\n        when AgeInYearsAt(start of &quot;Measurement Period&quot;) &lt; 1 then &quot;P0Y--P1Y&quot;\r\n        when AgeInYearsAt(start of &quot;Measurement Period&quot;) &gt;= 1 then &quot;P1Y--P9999Y&quot;\r\n        else null\r\n    end\r\n\r\n/** \r\n * Toddler By Age Stratifiers\r\n */\r\ndefine &quot;Toddler By Age Stratifier&quot;:\r\n    case \r\n        when AgeInYearsAt(start of &quot;Measurement Period&quot;) &lt; 2 then &quot;P0Y--P2Y&quot;\r\n        when AgeInYearsAt(start of &quot;Measurement Period&quot;) &gt;= 2 then &quot;P2Y--P9999Y&quot;\r\n        else null\r\n    end\r\n\r\n\r\n/** \r\n * Toddler By Age Stratifiers\r\n */\r\ndefine &quot;Adolescent By Age Stratifier&quot;:\r\n    case \r\n        when AgeInYearsAt(start of &quot;Measurement Period&quot;) &lt; 9 then &quot;P0Y--P9Y&quot;\r\n        when AgeInYearsAt(start of &quot;Measurement Period&quot;) &lt;= 14 then &quot;P9Y--P14Y&quot;\r\n        when AgeInYearsAt(start of &quot;Measurement Period&quot;) &gt; 14 then &quot;P15Y--P9999Y&quot;\r\n        else null\r\n    end\r\n\r\n/** \r\n * RCV age disaggregators\r\n */\r\ndefine &quot;RCV By Age Stratifier&quot;:\r\n    case \r\n        when AgeInMonthsAt(start of &quot;Measurement Period&quot;) &lt; 9 then &quot;P0M--P9M&quot;\r\n        when AgeInMonthsAt(start of &quot;Measurement Period&quot;) &lt; 18 then &quot;P9M--P18M&quot;\r\n        when AgeInYearsAt(start of &quot;Measurement Period&quot;) &lt; 15 then &quot;P18M--P15Y&quot;\r\n        when AgeInYearsAt(start of &quot;Measurement Period&quot;) &gt;= 15 then &quot;P15Y--P9999Y&quot;\r\n        else null\r\n    end\r\n\r\n/** \r\n * Varicella age disaggregators\r\n */\r\ndefine &quot;Varicella By Age Stratifier&quot;:\r\n    case \r\n        when AgeInMonthsAt(start of &quot;Measurement Period&quot;) &lt; 12 then &quot;P0M--P12M&quot;\r\n        when AgeInMonthsAt(start of &quot;Measurement Period&quot;) &lt; 18 then &quot;P12M--P18M&quot;\r\n        when AgeInMonthsAt(start of &quot;Measurement Period&quot;) &lt; 36 then &quot;P18M--P36M&quot;\r\n        when AgeInYearsAt(start of &quot;Measurement Period&quot;) &lt; 12 then &quot;P36M--P12Y&quot;\r\n        when AgeInYearsAt(start of &quot;Measurement Period&quot;) &gt;= 12 then &quot;P12Y--P9999Y&quot;\r\n        else null\r\n    end\r\n\r\n\r\n/** \r\n * Seasonal Influenza age disaggregators\r\n */\r\ndefine &quot;Seasonal Influenza By Age Stratifier&quot;:\r\n    case \r\n        when AgeInYearsAt(start of &quot;Measurement Period&quot;) &lt; 1 then &quot;P0Y--P1Y&quot;\r\n        when AgeInYearsAt(start of &quot;Measurement Period&quot;) &lt; 15 then &quot;P1Y--P15Y&quot;\r\n        when AgeInYearsAt(start of &quot;Measurement Period&quot;) &lt; 60 then &quot;P15Y--P60Y&quot;\r\n        when AgeInYearsAt(start of &quot;Measurement Period&quot;) &gt;= 60 then &quot;P60Y--P9999Y&quot;\r\n        else null\r\n    end\r\n/*\r\n * BCG Doses administered to the patient during the measurement period\r\n */\r\ndefine &quot;BCG Doses Administered to Patient During Measurement Period&quot;:\r\n    IMMZCom.&quot;BCG Doses Administered to Patient&quot; I\r\n\t\twhere IMMZCom.ToDate(I.occurrence) during &quot;Measurement Period&quot;\r\n\r\n/*\r\n * DTP Doses administered to the patient during the measurement period\r\n */\r\ndefine &quot;DTP Doses Administered to Patient During Measurement Period&quot;:\r\n    IMMZCom.&quot;DTP Doses Administered to Patient&quot; I\r\n\t\twhere IMMZCom.ToDate(I.occurrence) during &quot;Measurement Period&quot;\r\n\r\n/*\r\n * HepB Doses administered to the patient during the measurement period\r\n */\r\ndefine &quot;HepB Birth Doses Administered to Patient During Measurement Period&quot;:\r\n    IMMZCom.&quot;HepB Doses Administered to Patient&quot; I\r\n\t\twhere IMMZCom.ToDate(I.occurrence) during &quot;Measurement Period&quot;\r\n        and (singleton from I.protocolApplied).doseNumber = 0\r\n\r\n/**\r\n * Non-Birth HepB doses administered to patient\r\n */\r\ndefine &quot;HepB Non-Birth Doses Administered to Patient During Measurement Period&quot;:\r\n    IMMZCom.&quot;HepB Doses Administered to Patient&quot; I\r\n\t\twhere IMMZCom.ToDate(I.occurrence) during &quot;Measurement Period&quot;\r\n        and (singleton from I.protocolApplied).doseNumber &gt; 0\r\n\r\n/**\r\n * IPV Doses Administered to Patient\r\n */\r\ndefine &quot;IPV Doses Administered to Patient During Measurement Period&quot;:\r\n    IMMZCom.&quot;IPV Doses Administered to Patient&quot; I \r\n    where IMMZCom.ToDate(I.occurrence) during &quot;Measurement Period&quot;\r\n\r\ndefine &quot;Seasonal Influenza Doses Administered to Patient During Reporting Period&quot;:\r\n    IMMZCom.&quot;Seasonal Influenza Doses Administered to Patient&quot; I \r\n    where IMMZCom.ToDate(I.occurrence) during &quot;Measurement Period&quot;\r\n\r\n/**\r\n * OPV Birth Doses Administered to Patient\r\n */\r\ndefine &quot;bOPV Birth Doses Administered to Patient During Measurement Period&quot;:\r\n    IMMZCom.&quot;bOPV Doses Administered to Patient&quot; I \r\n    where IMMZCom.ToDate(I.occurrence) during &quot;Measurement Period&quot;\r\n    and (singleton from I.protocolApplied).doseNumber = 0\r\n\r\n/**\r\n * OPV Non-Birth Doses Administered to Patient\r\n */\r\ndefine &quot;bOPV Non-Birth Doses Administered to Patient During Measurement Period&quot;:\r\n    IMMZCom.&quot;bOPV Doses Administered to Patient&quot; I \r\n    where IMMZCom.ToDate(I.occurrence) during &quot;Measurement Period&quot;\r\n    and (singleton from I.protocolApplied).doseNumber &gt; 0\r\n\r\n\r\n/**\r\n * MCV Doses Administered to Patient\r\n */\r\ndefine &quot;MCV Doses Administered to Patient During Measurement Period&quot;:\r\n    IMMZCom.&quot;MCV Doses Administered to Patient&quot; I \r\n    where IMMZCom.ToDate(I.occurrence) during &quot;Measurement Period&quot;\r\n\r\n/**\r\n * HPV Doses Administered to Patient\r\n */\r\ndefine &quot;HPV Doses Administered to Patient During Measurement Period&quot;:\r\n    IMMZCom.&quot;HPV Doses Administered to Patient&quot; I \r\n    where IMMZCom.ToDate(I.occurrence) during &quot;Measurement Period&quot;\r\n\r\n/**\r\n * Meningococcal Doses Administered to Patient\r\n */\r\ndefine &quot;Meningococcal Doses Administered to Patient During Measurement Period&quot;:\r\n    IMMZCom.&quot;Meningococcal Doses Administered to Patient&quot; I \r\n    where IMMZCom.ToDate(I.occurrence) during &quot;Measurement Period&quot;\r\n\r\n/**\r\n * Pneumococcal Doses Administered to Patient\r\n */\r\ndefine &quot;Pneumococcal Doses Administered to Patient During Measurement Period&quot;:\r\n    IMMZCom.&quot;Pneumococcal Doses Administered to Patient&quot; I \r\n    where IMMZCom.ToDate(I.occurrence) during &quot;Measurement Period&quot;\r\n\r\n/**\r\n * HIB Doses Administered to Patient\r\n */\r\ndefine &quot;Hib Doses Administered to Patient During Measurement Period&quot;:\r\n    IMMZCom.&quot;Hib Doses Administered to Patient&quot; I \r\n    where IMMZCom.ToDate(I.occurrence) during &quot;Measurement Period&quot;\r\n\r\n/**\r\n * Rotavirus Doses Administered to Patient\r\n */\r\ndefine &quot;Rotavirus Doses Administered to Patient During Measurement Period&quot;:\r\n    IMMZCom.&quot;Rotavirus Doses Administered to Patient&quot; I \r\n    where IMMZCom.ToDate(I.occurrence) during &quot;Measurement Period&quot;\r\n\r\n/**\r\n * RCV Doses Administered to Patient\r\n */\r\ndefine &quot;Rubella Doses Administered to Patient During Measurement Period&quot;:\r\n    IMMZCom.&quot;Rubella Doses Administered to Patient&quot; I \r\n    where IMMZCom.ToDate(I.occurrence) during &quot;Measurement Period&quot;\r\n\r\n/**\r\n * Varicella Doses Administered to Patient\r\n */\r\ndefine &quot;Varicella Doses Administered to Patient During Measurement Period&quot;:\r\n    IMMZCom.&quot;Varicella Doses Administered to Patient&quot; I \r\n    where IMMZCom.ToDate(I.occurrence) during &quot;Measurement Period&quot;\r\n\r\n\r\n/**\r\n * Diptheria Doses Administered to Patient\r\n */\r\ndefine &quot;Diphtheria Booster Doses Administered to Patient During Measurement Period&quot;:\r\n    IMMZCom.&quot;Diphtheria Doses Administered to Patient&quot; I \r\n    where IMMZCom.ToDate(I.occurrence) during &quot;Measurement Period&quot;\r\n        and (singleton from I.protocolApplied).doseNumber &gt; 3\r\n\r\n/**\r\n * Pertussis Doses Administered to Patient\r\n */\r\ndefine &quot;Pertussis Booster Doses Administered to Patient During Measurement Period&quot;:\r\n    IMMZCom.&quot;Diphtheria Doses Administered to Patient&quot; I \r\n    where IMMZCom.ToDate(I.occurrence) during &quot;Measurement Period&quot;\r\n        and (singleton from I.protocolApplied).doseNumber &gt; 3\r\n\r\n\r\n/**\r\n * Tetanus Doses Administered to Patient\r\n */\r\ndefine &quot;Tetanus Booster Doses Administered to Patient During Measurement Period&quot;:\r\n    IMMZCom.&quot;Tetanus Doses Administered to Patient&quot; I \r\n    where IMMZCom.ToDate(I.occurrence) during &quot;Measurement Period&quot;\r\n        and (singleton from I.protocolApplied).doseNumber &gt; 4\r\n\r\n\r\n/**\r\n * Yellow Fever Doses Administered to Patient\r\n */\r\ndefine &quot;Yellow Fever Doses Administered to Patient During Measurement Period&quot;:\r\n    IMMZCom.&quot;Yellow Fever Doses Administered to Patient&quot; I \r\n    where IMMZCom.ToDate(I.occurrence) during &quot;Measurement Period&quot;\r\n\r\n\r\n/**\r\n * Japanese Encephalitis  Doses Administered to Patient\r\n */\r\ndefine &quot;JE Doses Administered to Patient During Measurement Period&quot;:\r\n    IMMZCom.&quot;JE Doses Administered to Patient&quot; I \r\n    where IMMZCom.ToDate(I.occurrence) during &quot;Measurement Period&quot;\r\n\r\n/**\r\n * Typhoid Encephalitis  Doses Administered to Patient\r\n */\r\ndefine &quot;Typhoid Doses Administered to Patient During Measurement Period&quot;:\r\n    IMMZCom.&quot;Typhoid Doses Administered to Patient&quot; I \r\n    where IMMZCom.ToDate(I.occurrence) during &quot;Measurement Period&quot;\r\n\r\n/** \r\n * HPV Doses recommended during reporting period - \r\n *  This is used since the country should define the rules which recommend an HPV dose (age, sex, etc.)\r\n */\r\ndefine &quot;HPV Doses Recommended During Reporting Period&quot;:\r\n    [ImmunizationRecommendation] IR\r\n    where exists(IR.recommendation RC where exists(RC.dateCriterion DC where date from DC.value during &quot;Measurement Period&quot;)\r\n    and RC.vaccineCode in IMMZc.&quot;HPV Vaccine&quot;)\r\n\r\n\r\n/** \r\n * Rubella Doses recommended during reporting period - \r\n *  This is used since the country should define the rules which recommend an Rubella dose (configuration, age, sex, etc.)\r\n */\r\ndefine &quot;Rubella Doses Recommended During Reporting Period&quot;:\r\n    [ImmunizationRecommendation] IR\r\n    where exists(IR.recommendation RC where exists(RC.dateCriterion DC where date from DC.value during &quot;Measurement Period&quot;)\r\n    and RC.vaccineCode in IMMZc.&quot;Rubella Vaccine&quot;)\r\n\r\n/** \r\n * Varicella Doses recommended during reporting period - \r\n *  This is used since the country should define the rules which recommend an Varicella dose (configuration, age, sex, etc.)\r\n */\r\ndefine &quot;Varicella Doses Recommended During Reporting Period&quot;:\r\n    [ImmunizationRecommendation] IR\r\n    where exists(IR.recommendation RC where exists(RC.dateCriterion DC where date from DC.value during &quot;Measurement Period&quot;)\r\n    and RC.vaccineCode in IMMZc.&quot;Varicella Vaccine&quot;)\r\n\r\n/** \r\n * Diphtheria Booster Doses recommended during reporting period - \r\n *  This is used since the country should define the rules which recommend an Diphtheria booster dose (configuration, age, sex, etc.)\r\n */\r\ndefine &quot;Diphtheria Booster Doses Recommended During Reporting Period&quot;:\r\n    [ImmunizationRecommendation] IR\r\n    where exists(IR.recommendation RC where exists(RC.dateCriterion DC where date from DC.value during &quot;Measurement Period&quot;)\r\n    and RC.doseNumber &gt; 3\r\n    and RC.vaccineCode in IMMZc.&quot;Diphtheria Vaccine&quot;)\r\n\r\n/** \r\n * Pertussis Booster Doses recommended during reporting period - \r\n *  This is used since the country should define the rules which recommend an Pertussis booster dose (configuration, age, sex, etc.)\r\n */\r\ndefine &quot;Pertussis Booster Doses Recommended During Reporting Period&quot;:\r\n    [ImmunizationRecommendation] IR\r\n    where exists(IR.recommendation RC where exists(RC.dateCriterion DC where date from DC.value during &quot;Measurement Period&quot;)\r\n    and RC.doseNumber &gt; 3\r\n    and RC.vaccineCode in IMMZc.&quot;Pertussis Vaccine&quot;)\r\n\r\n\r\n/** \r\n * Tetanus Booster Doses recommended during reporting period - \r\n *  This is used since the country should define the rules which recommend an Tetanus booster dose (configuration, age, sex, etc.)\r\n */\r\ndefine &quot;Tetanus Booster Doses Recommended During Reporting Period&quot;:\r\n    [ImmunizationRecommendation] IR\r\n    where exists(IR.recommendation RC where exists(RC.dateCriterion DC where date from DC.value during &quot;Measurement Period&quot;)\r\n    and RC.doseNumber &gt; 3\r\n    and RC.vaccineCode in IMMZc.&quot;Tetanus Vaccine&quot;)\r\n\r\n\r\n/**\r\n * By Administrative Gender of Patient Stratifier\r\n */\r\ndefine &quot;By Administrative Gender Stratifier&quot;:\r\n    case \r\n        when Patient.gender = 'male' then &quot;Males&quot;\r\n        when Patient.gender = 'female' then &quot;Females&quot;\r\n        else &quot;Other&quot;\r\n    end\r\n\r\n/**\r\n * By Administrative Gender of Patient Stratifier\r\n */\r\ndefine &quot;By Geographic Region Stratifier&quot;:\r\n    First(Patient.address A where A.use in { 'home' }).state\r\n\r\n/** \r\n * @dataElement Patient is deceased\r\n */\r\ndefine &quot;Patient Deceased During Measurement Period&quot;:\r\n  case \r\n    when Patient.deceased is FHIR.boolean then Patient.deceased as FHIR.boolean\r\n    when Patient.deceased is FHIR.dateTime then Patient.deceased as FHIR.dateTime before end of &quot;Measurement Period&quot;\r\n    else false\r\n  end\r\n\r\n/** \r\n * Patient was born during measurement period\r\n */\r\ndefine &quot;Patient Born During Measurement Period&quot;:\r\n    Patient.birthDate during &quot;Measurement Period&quot;\r\n\r\n/** \r\n * Patient is &lt; 12 months old at the end of the measurement period\r\n */\r\ndefine &quot;Patient Under 12 Months Old During Measurement Period&quot;:\r\n    Patient.birthDate more than 12 month before end of &quot;Measurement Period&quot;\r\n\r\n/** \r\n * Patient is &lt; 12 years old at the end of the measurement period\r\n */\r\ndefine &quot;Patient Under 2 Years Old During Measurement Period&quot;:\r\n    Patient.birthDate more than 2 year before end of &quot;Measurement Period&quot;\r\n\r\n\r\n/** \r\n * @define Adverse events for immunizations which occurred during (or observed) during measurement period\r\n */\r\ndefine &quot;Immunizations with Adverse Events During Measurement Period&quot;:\r\n    IMMZCom.&quot;Doses Administered to Patient&quot; I\r\n    with [Observation: code in WC.&quot;Adverse Events&quot;] O\r\n    such that exists(I.reaction R where O.id = Last(Split(R.detail.reference, '/')))\r\n    and FC.ToInterval(O.effective) during &quot;Measurement Period&quot;\r\n\r\n\r\n/** \r\n * @define Adverse events for immunizations which occurred during (or observed) during measurement period\r\n */\r\ndefine &quot;Adverse Event Reactions During Measurement Period&quot;:\r\n    [Observation: code in WC.&quot;Adverse Events&quot;] O\r\n    with IMMZCom.&quot;Doses Administered to Patient&quot; I\r\n    such that exists(I.reaction R where O.id = Last(Split(R.detail.reference, '/')))\r\n    where FC.ToInterval(O.effective) during &quot;Measurement Period&quot;\r\n\r\n/** \r\n * @define Doses which were \r\n */\r\ndefine &quot;Doses Administered to Patient During Measurement Period&quot;:\r\n    IMMZCom.&quot;Doses Administered to Patient&quot;  I\r\n    where IMMZCom.ToDate(I.occurrence) during &quot;Measurement Period&quot;\r\n\r\n/** \r\n * @function\r\n * @param immunization The immunization record for which the location should be retrieved\r\n * @return FHIR.address The location that the immunization event occurred\r\n */\r\ndefine function GetGeographicRegionForImmunization(immunization Immunization):\r\n    WCom.Official([Location] L \r\n        where L.id = Last(Split(immunization.location.reference, '/'))\r\n        return L.address).state</code></pre></div>"
  },
  "extension" : [{
    "url" : "http://hl7.org/fhir/us/cqfmeasures/StructureDefinition/cqfm-softwaresystem",
    "valueReference" : {
      "reference" : "Device/cqf-tooling"
    }
  }],
  "url" : "http://smart.who.int/ig/smart-immunizations-measles/Library/IMMZIndicatorCommon",
  "version" : "0.1.0",
  "name" : "IMMZIndicatorCommon",
  "status" : "draft",
  "type" : {
    "coding" : [{
      "system" : "http://terminology.hl7.org/CodeSystem/library-type",
      "code" : "logic-library"
    }]
  },
  "date" : "2023-10-23T19:19:30+00:00",
  "publisher" : "WHO",
  "contact" : [{
    "name" : "WHO",
    "telecom" : [{
      "system" : "url",
      "value" : "http://who.int"
    }]
  }],
  "content" : [{
    "contentType" : "text/cql",
    "data" : ""
  }]
}